1
00:00:08,619 --> 00:00:13,137
Python程序設計師通常認為在程式語言中，可以使用多種方法

2
00:00:13,137 --> 00:00:15,140
來解決一個特定問題。

3
00:00:15,140 --> 00:00:18,090
但是，有些是比其他的更合適。

4
00:00:18,090 --> 00:00:21,340
最好的解決方案被稱為慣用的Python，

5
00:00:21,340 --> 00:00:24,662
有很多很好的例子在stackoverflow和網站上。

6
00:00:25,720 --> 00:00:30,200
慣用的解決方案通常是具有高性能和

7
00:00:30,200 --> 00:00:31,650
高可讀性。

8
00:00:31,650 --> 00:00:33,260
這並不一定是真的。

9
00:00:33,260 --> 00:00:39,200
如同某種Python的子語言，Pandas有自己的一套慣用語。

10
00:00:39,200 --> 00:00:42,680
我們已經提到了其中一些，例如盡可能使用向量化

11
00:00:42,680 --> 00:00:46,570
，和不使用反覆運算迴圈，如果你不需要。

12
00:00:46,570 --> 00:00:47,640
幾位開發人員和

13
00:00:47,640 --> 00:00:52,200
用戶在Pandas社區內，對這些慣用語稱為pandorable。

14
00:00:52,200 --> 00:00:53,650
我認為這是一個非常好的術語。

15
00:00:53,650 --> 00:00:57,810
所以，我想和你分享幾個關鍵特色，如何可以使您的程式

16
00:00:57,810 --> 00:00:58,530
pandorable。

17
00:00:59,770 --> 00:01:02,150
其中第一個稱為方法鏈接(method chaining)。

18
00:01:02,150 --> 00:01:04,140
我們以前看到過，

19
00:01:04,140 --> 00:01:07,460
當您查詢DataFrames時，您可以將pandas的程序調用鏈接在一起。

20
00:01:07,460 --> 00:01:11,890
例如，如果要根據像縣名的索引來選擇行(row)。

21
00:01:11,890 --> 00:01:15,680
然後你只想要，像Total Population一樣的，某些列(column)，

22
00:01:15,680 --> 00:01:20,870
你可以編寫一個查詢，如df.loc[“Washtenaw”][“Total Population”]

23
00:01:20,870 --> 00:01:24,480
這是一種鏈接形式，稱為鏈式索引(chain indexing)。

24
00:01:24,480 --> 00:01:26,030
這通常是一個糟糕的做法。

25
00:01:26,030 --> 00:01:28,910
因為Pandas可能會返回DataFrame的副本或

26
00:01:28,910 --> 00:01:33,722
視圖，根據基礎的NumPy程式庫。

27
00:01:33,722 --> 00:01:37,100
在他對pandas慣用語的描述，模式開發人員

28
00:01:37,100 --> 00:01:40,470
Tom Osberger為此說了一個經驗法則。

29
00:01:40,470 --> 00:01:42,590
如果你看到背靠背的方括號，

30
00:01:42,590 --> 00:01:46,260
那麼你應該仔細想想，如果你想做鏈式索引。

31
00:01:46,260 --> 00:01:49,350
我認為這是一個很好的程式探察或反模式。

32
00:01:50,550 --> 00:01:53,620
方法鏈接，然而，有點不同。

33
00:01:53,620 --> 00:01:56,440
方法鏈接的一般思想是，每個方法

34
00:01:56,440 --> 00:01:58,980
對某物件，都會返回參考(reference)該物件。

35
00:01:58,980 --> 00:02:02,470
這樣做的好處是，您可以將許多不同操作

36
00:02:02,470 --> 00:02:07,140
在一個DataFrame，集中在一行或至少一個程式語句中。

37
00:02:07,140 --> 00:02:11,310
這是Pandas中的兩種程式的例子，使用我們的人口普查數據。

38
00:02:11,310 --> 00:02:15,290
第一個是pandorable方式，用方法鏈接編寫的程式。

39
00:02:15,290 --> 00:02:18,660
在這段程式中，沒有使用inplace選項標誌，你可以看到，我們

40
00:02:18,660 --> 00:02:23,260
首先運行一個where查詢，然後一個dropna，然後一個set_index，然後一個rename。

41
00:02:23,260 --> 00:02:26,920
您可能會想知道為什麼整個語句被括在括號中，

42
00:02:26,920 --> 00:02:29,020
這只是為了使語句更易於閱讀。

43
00:02:29,020 --> 00:02:31,190
在Python中，如果你從一個開放括號開始，

44
00:02:31,190 --> 00:02:35,930
你可以一個語句跨越很多行，更好讀一點。

45
00:02:35,930 --> 00:02:38,890
第二個例子是編寫程式的更傳統的方式。

46
00:02:38,890 --> 00:02:41,450
這個程式在功能上沒有什麼問題，

47
00:02:41,450 --> 00:02:46,010
做為語言的一個新人，甚至可以更容易地理解。

48
00:02:46,010 --> 00:02:50,050
它不像第一個例子那樣pandorable。

49
00:02:50,050 --> 00:02:54,810
現在，任何好的慣用語的關鍵是，要理解它不幫你的時候。

50
00:02:54,810 --> 00:02:56,960
在這種情況下，你可以實際量這兩種方法時間的和

51
00:02:56,960 --> 00:02:58,610
看到後一種方法是更快。

52
00:02:58,610 --> 00:03:02,460
所以，這是一個典型的時間-可讀性折衷的例子。

53
00:03:03,890 --> 00:03:06,130
你會看到許多的例子在stackoverflow，以及

54
00:03:06,130 --> 00:03:09,130
在Pandas中他們使用方法鏈接的文檔。

55
00:03:09,130 --> 00:03:10,680
所以，我認為能夠閱讀和

56
00:03:10,680 --> 00:03:13,076
理解語法，真的值得你花的時間。

57
00:03:13,076 --> 00:03:16,260
這有另一個Pandas的慣用語。

58
00:03:16,260 --> 00:03:19,420
Python有一個很好的功能，叫做map，它是語言中

59
00:03:19,420 --> 00:03:21,760
函數功能程式的基礎。

60
00:03:21,760 --> 00:03:25,310
當你想在Python中使用map時，你傳遞一些你想要調用的函數，

61
00:03:25,310 --> 00:03:29,530
一些可以反復迭的物件，像一個列表，你要這函數運用在上面的。

62
00:03:29,530 --> 00:03:33,280
結果是對列表中的每個項目運用這個函數，

63
00:03:33,280 --> 00:03:36,799
其輸出是，所有函數執行的結果列表。

64
00:03:37,820 --> 00:03:40,480
Python有一個類似的功能，名為applymap。

65
00:03:40,480 --> 00:03:43,420
在applymap中，您提供了一些應該對DataFrame的每個單元格進行操作的函數，

66
00:03:43,420 --> 00:03:47,190
資料幀，並返回集合本身就是一個資料幀。

67
00:03:47,190 --> 00:03:50,330
我認為applymap是好的，但實際上很少使用它。

68
00:03:50,330 --> 00:03:53,910
相反，我發現自己經常希望映射所有的行

69
00:03:53,910 --> 00:03:54,830
資料幀。

70
00:03:54,830 --> 00:03:58,250
Pandas有一個我在這里經常使用的功能，稱為apply。

71
00:03:58,250 --> 00:03:59,310
讓我們看另一個例子

72
00:04:00,760 --> 00:04:02,570
我們來看看普查的DataFrame。

73
00:04:02,570 --> 00:04:05,560
在這個DataFrame中，我們有五列的人口估計。

74
00:04:05,560 --> 00:04:08,710
每列對應一年的估計。

75
00:04:08,710 --> 00:04:12,130
是非常合理的去想要創建一些新列，用最小或

76
00:04:12,130 --> 00:04:15,259
最大值，apply函數是一種簡單的方法。

77
00:04:16,350 --> 00:04:19,770
首先，我們需要編寫一個函數，該函數接收特定的數據行，

78
00:04:19,770 --> 00:04:23,880
找到最小值和最大值，並返回一行新的數據。

79
00:04:23,880 --> 00:04:27,230
我們稱這個函數為min_max，這很簡單。

80
00:04:27,230 --> 00:04:31,140
我們可以創建一小片的行，通過投影population列。

81
00:04:31,140 --> 00:04:33,720
然後使用NumPy的min和max函數，

82
00:04:33,720 --> 00:04:37,390
並創建一個帶有標籤值的新系列，表示我們要應用的新值。

83
00:04:39,180 --> 00:04:41,590
然後我們只需要在DataFrame上調用apply。

84
00:04:41,590 --> 00:04:45,890
apply採取先前的函數和指定的軸(axis)作為運作的參數。

85
00:04:45,890 --> 00:04:47,360
現在，我們要小心一點，

86
00:04:47,360 --> 00:04:50,790
我們過去談過軸零(axiz 0)是DataFrame的行。

87
00:04:50,790 --> 00:04:54,690
但這個參數實際上是使用那個索引的參數。

88
00:04:54,690 --> 00:04:59,090
因此，要應用跨所有的行，您將軸等於1。

89
00:04:59,090 --> 00:05:02,648
當然，沒有必要限制自己返回一個新的系列物件。

90
00:05:02,648 --> 00:05:05,575
如果您作為數據清理的一部分，可能會發現自己

91
00:05:05,575 --> 00:05:08,660
想要將新數據添加到現有DataFrame中。

92
00:05:08,660 --> 00:05:10,892
在這種情況下，您只需取行的值，

93
00:05:10,892 --> 00:05:14,705
並添加新的列，表示最大和最小值。

94
00:05:14,705 --> 00:05:18,675
這是我經常工作流程的一部分，用提供的數據來構建摘要或

95
00:05:18,675 --> 00:05:20,385
描述性統計數據。

96
00:05:20,385 --> 00:05:22,755
並且經常被用來合併DataFrames。

97
00:05:24,305 --> 00:05:28,435
好的，這是非常好的，apply是您工具包中非常重要的工具。

98
00:05:28,435 --> 00:05:31,795
但是這個講座並不是真的應該是關於API的新功能，

99
00:05:31,795 --> 00:05:34,710
而是關於製作pandorable程式。

100
00:05:34,710 --> 00:05:38,040
我在這裡介紹apply的原因是因為你很少看到它

101
00:05:38,040 --> 00:05:41,680
與大的函數定義一起使用，就像我們做的。

102
00:05:41,680 --> 00:05:44,750
相反，你通常會看到它與lambda一起使用。

103
00:05:44,750 --> 00:05:47,920
現在，你回想本課程的第一周，知道lambda不是

104
00:05:47,920 --> 00:05:49,590
課程的必要條件。

105
00:05:49,590 --> 00:05:51,920
但是，為了充分利用網路上的討論，

106
00:05:51,920 --> 00:05:54,970
您需要知道至少能夠讀lambda的程式。

107
00:05:54,970 --> 00:05:58,410
以下是一個一行示例，說明如何計算列的最大值，

108
00:05:58,410 --> 00:05:59,950
使用apply函數。

109
00:05:59,950 --> 00:06:03,710
您可以想像如何鏈接多個apply程式與lambda一起用，

110
00:06:03,710 --> 00:06:06,740
以創建一個可讀而簡潔的數據操作程式

111
00:06:08,340 --> 00:06:10,070
所以這是幾個pandas的慣用語。

112
00:06:10,070 --> 00:06:13,090
但我覺得還有很多，我沒有在這裡談論過。

113
00:06:13,090 --> 00:06:15,160
所以這是一個非正式的作業給你。

114
00:06:15,160 --> 00:06:19,030
去看看StackOverflow上一些關於pandas排名最高的問題，

115
00:06:19,030 --> 00:06:22,230
看看一些更有經驗的作者，回答這些問題。

116
00:06:22,230 --> 00:06:24,600
你看到有趣的模式嗎？

117
00:06:24,600 --> 00:06:26,567
加入在課程討論的論壇上，

118
00:06:26,567 --> 00:06:28,980
讓我們一起構建一些pandorable的文件。

119
00:06:30,130 --> 00:06:32,810
我們的下一個講課將是group功能函數，回頭見。