你可能已經看過這個關鍵字lambda，出現在本週的內容中， 當你花費越來越多的時間與Python和數據科學時，你將看到更多。 數據科學裏。 Lambda是Python的方法創建不具名函數。 這些與其他函數相同，但沒有名稱。 意圖在於它們很簡單或 短暫使用，它容易，只需要在一行中就能夠寫出函數， 而不必麻煩的去創建一個有名稱函數。 Lambda語法是相當簡單的。 但可能需要一點時間去適應。 你聲明一個lambda函數，用關鍵詞lambda，後跟一個列表 參數，其次是一個冒號，然後一個單一的運算式，這是關鍵。 那裡只有一個運算式在lambda中要被評估。 執行的lambda回復運算式的值。 Lambda的回復是一個函數引用 所以在這種情況下，您將執行my_function和 並傳入三個不同的參數。 請注意，你不能有lambda參數的預設值，和 你不能在lambda本身內部有複雜的邏輯， 因為lambda限於單個運算式。 所以lambda是真的比較限制的，比起完整的函數功能定義。 但我認為在簡單的小數據清理任務，他們是非常有用的。 你會在網站上看到很多他們的例子。 所以，你應該能夠讀和寫lambda函數。 讓我們在這裡試一試。 我們在Python中已經學了不少關於序列(sequences)。 元組(tuple)，列表(list)、字典(dictionary)等等。 序列是我們可以遍歷的結構和 往往我們創建這些經由迴圈(loop)或從一個文件檔中讀取數據資料。 Python已經內建了使用更簡潔的語法來創建這些集合， 叫做list comprehensions。 這裡有個例子，這裡有個例子， 首先我們寫一個小的for-loop。 這裡我在0到1000之間迭代，然後用模數運算來 檢查數字除以2是否有任何小數。 如果數字的模數2的結果為零，那麼我知道它是整除，所以 這一定是一個偶數，我會把它添加到我們的列表中。 我們可以用list comprehension來改寫這個， 通過只用一行代碼來循環迭代。 我們用列表中所需的值去開始list comprehension。 在這種情況下，這是一個數字。 然後我們把它放在for-loop，然後最後，我們添加任何條件條款。 你可以看到，這是更緊湊的格式。 而且它往往也會更快。 就像lambdas一樣，list comprehensions是濃縮的格式 它們可提供可讀性和性能優勢和 你常常會發現它們被用在數據科學教程或在stack overflow網絡。 但你不需要在本課程中的作業中使用它們。 在這裡，你為什麼不嘗試將一個函數轉換為list comprehensions。