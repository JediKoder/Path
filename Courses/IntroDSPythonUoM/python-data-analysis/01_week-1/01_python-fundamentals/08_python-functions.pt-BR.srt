1
00:00:08,706 --> 00:00:09,959
No resto desse módulo,

2
00:00:09,959 --> 00:00:13,750
fornecerei uma visão geral muito básica
da linguagem de programação Python.

3
00:00:13,750 --> 00:00:15,890
Se você tem conhecimento em programação,

4
00:00:15,890 --> 00:00:19,530
esta visão geral deve ser suficiente para
completar o resto do curso

5
00:00:19,530 --> 00:00:22,090
e também os demais cursos
desta especialização.

6
00:00:22,090 --> 00:00:24,330
Se não tiver experiência
em programação ou

7
00:00:24,330 --> 00:00:28,180
sentir que o conteúdo é muito complexo,
então, eu sugiro que pare e

8
00:00:28,180 --> 00:00:30,750
faça um curso introdutório em programação.

9
00:00:30,750 --> 00:00:34,320
Meu colega, Dr. Chuck Severance
dá uma excelente especialização aqui no

10
00:00:34,320 --> 00:00:36,760
Coursera, chamado "Python para Todos"
- Python for Everybody.

11
00:00:36,760 --> 00:00:38,780
Há um link para ela
nos recursos deste curso.

12
00:00:39,980 --> 00:00:44,240
O sistema do Coursera permite a você
rodar códigos Python a partir do seu navegador, de duas formas:

13
00:00:44,240 --> 00:00:47,390
Primeira - podemos digitar no prompt de comandos 
quando perguntado no vídeo da aula e

14
00:00:47,390 --> 00:00:50,030
você poderá tentar resolver
a questão no browser.

15
00:00:50,030 --> 00:00:52,070
Isso é novo na plataforma do Coursera e

16
00:00:52,070 --> 00:00:54,840
testaremos isso
nas próximas aulas.

17
00:00:54,840 --> 00:00:58,080
Segunda - o sistema Coursera foi integrado 
ao Jupyter notebooks (da plataforma Python).

18
00:00:59,120 --> 00:01:02,370
Os notebooks Jupyter nos possibilitam dividir
nosso código no que eles chamam de células, e

19
00:01:02,370 --> 00:01:04,710
executar tais células sob demanda.

20
00:01:04,710 --> 00:01:07,640
O bom sobre os notebooks
é que eles oferecem um armazenamento

21
00:01:07,640 --> 00:01:10,330
semi-permanente para seu aprendizado e
você pode experimentar e

22
00:01:10,330 --> 00:01:14,230
programar sem ter que
instalar nada em seu computador.

23
00:01:14,230 --> 00:01:17,300
Todas as tarefas serão feitas no
Jupyter notebooks, mas você pode, é claro,

24
00:01:17,300 --> 00:01:21,390
baixar e instalar o Python, Jupyter, todas
as bibliotecas associadas de que precisar para

25
00:01:21,390 --> 00:01:24,300
este curso no seu computador
se preferir.

26
00:01:24,300 --> 00:01:27,260
Nosso assistente tutorial fornecerá
uma visão geral deste

27
00:01:27,260 --> 00:01:31,170
processo instalando o Jupyter
notebooks localmente, no próximo vídeo, para

28
00:01:31,170 --> 00:01:34,890
aqueles que se interessarem, e eu
darei uma visão geral de como usar os

29
00:01:34,890 --> 00:01:37,360
notebooks no ambiente Coursera
nesta aula.

30
00:01:38,540 --> 00:01:41,470
Por hora,
vejamos um pouco de Python básico.

31
00:01:41,470 --> 00:01:45,040
Primeiro, Python é uma linguagem de alto nível,
o que significa que é otimizado para

32
00:01:45,040 --> 00:01:46,830
que as pessoas, ao invés das máquinas,
possam ler.

33
00:01:46,830 --> 00:01:51,210
Também é uma linguagem interpretada, que significa
 que o código fonte não é compilado diretamente em

34
00:01:51,210 --> 00:01:56,680
código de máquina, assim, importa dizer
é comumente usado de modo interativo.

35
00:01:56,680 --> 00:01:59,750
Isso pode ser um pouco diferente se você
costuma programar em linguagens como

36
00:01:59,750 --> 00:02:04,930
Java ou C, onde escreve-se o código,
depois compila, executa e vê o resultado.

37
00:02:04,930 --> 00:02:08,680
Em Python, pode-se iniciar o interpretador
interativo e começar a codificar,

38
00:02:08,680 --> 00:02:13,240
linha por linha, com o interpretador
avaliando cada instrução à medida que ela é escrita.

39
00:02:13,240 --> 00:02:15,090
Isto acaba por ser muito útil para

40
00:02:15,090 --> 00:02:20,100
tarefas que exigem muita investigação, 
contra aqueles que exigem muito do design.

41
00:02:20,100 --> 00:02:22,320
Shell script é um exemplo disso.

42
00:02:22,320 --> 00:02:24,415
E limpeza de dados é outro exemplo.

43
00:02:24,415 --> 00:02:27,750
Ou você escreve scripts, os quais
executam programas, como você pode estar

44
00:02:27,750 --> 00:02:29,310
acostumado em outras linguagens.

45
00:02:29,310 --> 00:02:32,030
Usaremos Python
nesta especialização,

46
00:02:32,030 --> 00:02:33,429
no modo interativo.

47
00:02:35,030 --> 00:02:39,260
Algo que surpreende alguns programadores
que vem de Java ou C é que

48
00:02:39,260 --> 00:02:44,100
Python é uma linguagem com tipos dinâmicos
semelhantes a linguagens como JavaScript.

49
00:02:44,100 --> 00:02:46,120
Isto quer dizer que quando você
declara uma variável,

50
00:02:46,120 --> 00:02:49,390
pode atribuir a ela um inteiro numa linha
e uma string (sequência de caracteres) na linha seguinte.

51
00:02:50,670 --> 00:02:52,450
Já que não existe o passo da compilação,

52
00:02:52,450 --> 00:02:54,910
não tem nada que lhe
auxilie a gerenciar tipos.

53
00:02:54,910 --> 00:02:58,700
Você precisa ou verificar a presença da
funcionalidade quando vai usá-la, ou

54
00:02:58,700 --> 00:03:02,530
tentar usar a funcionalidade e
usar catch para tratar os erros que ocorrerem.

55
00:03:02,530 --> 00:03:05,970
Os tipos serem dinâmicos em Python é
uma peculiaridade interessante quando usada

56
00:03:05,970 --> 00:03:09,200
no modo interativo,
já que isso permite rapidamente atribuir e

57
00:03:09,200 --> 00:03:13,460
modificar o conteúdo das variáveis sem ter
que se preocupar sobre a sintaxe que está por trás

58
00:03:13,460 --> 00:03:14,559
da definição da variável.

59
00:03:15,590 --> 00:03:18,030
Ok, então, vamos direto a um exemplo.

60
00:03:18,030 --> 00:03:21,250
Para todos os exemplos codificados aqui,
você encontrará uma versão comentada no

61
00:03:21,250 --> 00:03:24,970
notebook
na seção de recursos deste curso.

62
00:03:24,970 --> 00:03:28,410
Fique à vontade para me seguir, se você quiser ou para criar um novo notebook e

63
00:03:28,410 --> 00:03:30,060
de modo ativo, digitar
seu próprio código, se preferir.

64
00:03:31,140 --> 00:03:33,710
O Python é um econômico criador
de códigos.

65
00:03:33,710 --> 00:03:37,110
De fato, se quiser atribuir valores a
algumas variáveis, e exibir

66
00:03:37,110 --> 00:03:41,240
o resultados delas todas juntas,
dá para fazer isso em apenas três linhas.

67
00:03:41,240 --> 00:03:43,570
Neste exemplo,
codificarei três instruções.

68
00:03:43,570 --> 00:03:48,380
As duas primeiras atribuirão valores inteiros
às variáveis x e y.

69
00:03:48,380 --> 00:03:49,420
Depois, as adicionaremos.

70
00:03:50,420 --> 00:03:53,710
Podemos executar esta célula
pressionando as teclas Shift Enter, ou

71
00:03:53,710 --> 00:03:57,000
clicando no ícone "play"
que está no cabeçalho das ferramentas.

72
00:03:57,000 --> 00:04:00,150
O resultado da instrução é
logo exibida.

73
00:04:00,150 --> 00:04:03,610
Se não estivesse usando Python
no modo interativo, nada seria exibido.

74
00:04:03,610 --> 00:04:07,960
Mas já que vamos usá-lo no modo interativo,
 podemos obter o valor imediatamente.

75
00:04:07,960 --> 00:04:11,740
O que acontece nos bastidores, 
é que o navegador está enviando seu código Python

76
00:04:11,740 --> 00:04:13,550
para uma máquina que
está na nuvem,

77
00:04:13,550 --> 00:04:18,100
a qual executa o código num interpretador
Python, e então envia de volta o resultado.

78
00:04:19,640 --> 00:04:24,880
Podemos ver que depois da execução de uma célula,
uma nova célula vazia é criada para nós abaixo.

79
00:04:24,880 --> 00:04:28,200
Se apenas digitarmos x e executarmos,
receberemos o resultado = 1.

80
00:04:28,200 --> 00:04:31,820
Então, é importante saber que o interpretador Python
mantém o estado - é 'stateful'.

81
00:04:31,820 --> 00:04:34,560
Isso quer dizer que
suas variáveis perduram nas células seguintes.

82
00:04:35,710 --> 00:04:39,130
Além disso, se voltar atrás
e mudar alguma coisa em uma célula anterior,

83
00:04:39,130 --> 00:04:43,050
terá que executar de novo 
o script para fazer essas mudanças serem refletidas.

84
00:04:43,050 --> 00:04:46,730
A função 'restart and run all', para reiniciar e executar tudo,
é particularmente útil, já que limpa

85
00:04:46,730 --> 00:04:50,670
o estado do interpretador e reexecuta todas
as células do notebook atual.

86
00:04:51,760 --> 00:04:54,310
Você notará que o Python
não requer o uso de

87
00:04:54,310 --> 00:04:57,330
palavras-chave como 'var' para
declarar uma variável ou

88
00:04:57,330 --> 00:05:01,680
ponto e vírgula no final das linhas,
que são comumente usados em outras linguagens.

89
00:05:01,680 --> 00:05:05,280
Python utiliza o espaço em branco
 para compreender o escopo das funções e

90
00:05:05,280 --> 00:05:08,700
laços de repetição e marcadores de fim de linha
para entender o final das instruções.

91
00:05:09,830 --> 00:05:13,680
Claro, o Python tem estruturas de software
tradicionais como as funções.

92
00:05:13,680 --> 00:05:17,750
Eis aqui um exemplo, recriando o código anterior
 agora como uma função.

93
00:05:17,750 --> 00:05:21,470
Veja que a instrução 'def' indica que estamos 
escrevendo, estamos definindo uma função.

94
00:05:21,470 --> 00:05:24,320
Em seguida, cada linha que é parte da 
função precisa ser recuada (aninhada, denteada)

95
00:05:24,320 --> 00:05:26,440
usando a tecla 'tab'
ou alguns espaços em branco.

96
00:05:27,510 --> 00:05:31,200
Novamente, porque estamos em um 
ambiente interativo, quando a instrução é

97
00:05:31,200 --> 00:05:35,330
avaliada ao teclar Shift Enter, 
os resultados são exibidos imediatamente abaixo.

98
00:05:37,240 --> 00:05:39,110
Eis aqui nosso primeiro pedaço
do que interagimos.

99
00:05:39,110 --> 00:05:43,878
Por que não tenta mudar esta função para 
aceitar três parâmetros em vez de dois,

100
00:05:43,878 --> 00:05:46,175
e para que ela retorne a soma deles três?

101
00:05:49,048 --> 00:05:52,168
Ok, funções são uma maravilha, mas elas são 
um pouco diferentes do que você pode encontrar em

102
00:05:52,168 --> 00:05:55,420
outras linguagens. Aqui vão
 algumas das sutilezas envolvidas.

103
00:05:55,420 --> 00:05:59,810
Primeira: como não há tipo de variável,
você não tem que definir o tempo de resposta.

104
00:05:59,810 --> 00:06:02,930
Segunda: na verdade, não precisa da instrução
'return' para retornar ao usuário.

105
00:06:02,930 --> 00:06:06,030
Há um valor especial chamado 'none', 
significando nada ou nenhum, que é retornado.

106
00:06:06,030 --> 00:06:09,650
'None' é semelhante a 'null' em Java 
e representa a ausência de valor.

107
00:06:10,730 --> 00:06:14,820
Terceira sutileza: em Python, você pode ter
valores default, padrão, para parâmetros.

108
00:06:14,820 --> 00:06:15,980
Eis um exemplo:

109
00:06:15,980 --> 00:06:20,390
Neste exemplo, podemos reescrever a função
add_numbers para pegar 3 parâmetros

110
00:06:20,390 --> 00:06:23,970
mas, poderíamos atribuir ao terceiro,
caso nada seja passado, 'none' por default.

111
00:06:23,970 --> 00:06:28,220
Isso quer dizer que podemos chamar add_numbers
passando dois números, ou três, e

112
00:06:28,220 --> 00:06:31,100
você não precisa escrever outra função
para executar ambos os casos (overload).

113
00:06:32,290 --> 00:06:34,650
Esta é uma implicação importante!

114
00:06:34,650 --> 00:06:38,580
Quaisquer parâmetros opcionais,
aqueles que possuírem valor default codificado,

115
00:06:38,580 --> 00:06:42,030
precisam vir ao final
da declaração da função.

116
00:06:42,030 --> 00:06:46,100
Isso significa também que você pode passar
parâmetros opcionais explicitamente nomeando-os na passagem,

117
00:06:46,100 --> 00:06:48,600
chamamos isso de parâmetros rotulados
(labeled params), vejam um exemplo.

118
00:06:48,600 --> 00:06:52,135
Reescrevemos aquela função de modo
que agora temos dois parâmetros opcionais.

119
00:06:52,135 --> 00:06:55,300
Se quisermos chamá-la passando
apenas dois números, mas

120
00:06:55,300 --> 00:06:58,690
também marcando a flag de valor,
temos que explicitamente nomear e

121
00:06:58,690 --> 00:07:02,670
marcar a flag do parâmetro para true
quando invocando a função.

122
00:07:02,670 --> 00:07:05,650
Agora, você já viu também
o uso da instrução print.

123
00:07:05,650 --> 00:07:08,000
Vamos mergulhar em cadeias de caracteres 
(tipo string) mais detalhadamente, mas

124
00:07:08,000 --> 00:07:11,950
o print pega um item, tenta convertê-lo para string
e imprime o resultado.

125
00:07:11,950 --> 00:07:14,910
Não usamos tanto o print no modo
interativo do interpretador, mas

126
00:07:14,910 --> 00:07:18,110
ele é útil quando queremos imprimir
muitos valores numa única célula.

127
00:07:19,220 --> 00:07:22,840
Certo, uma última palavra sobre
conceitos básicos de funções em Python.

128
00:07:22,840 --> 00:07:25,740
Em Python, você pode atribuir uma variável a uma função.

129
00:07:25,740 --> 00:07:27,910
Isto pode parecer 
ou completamente normal para você, ou

130
00:07:27,910 --> 00:07:31,410
completamente estranho,
dependendo do seu conhecimento em programação.

131
00:07:31,410 --> 00:07:34,950
Ao atribuir uma variável a uma função,
você pode passar essa variável para

132
00:07:34,950 --> 00:07:38,830
outras funções permitindo alguma
programação funcional básica.

133
00:07:38,830 --> 00:07:41,160
Falaremos sobre isso um pouco
mais adiante no curso.

134
00:07:41,160 --> 00:07:44,620
Mas aqui está um exemplo onde definimos
uma função para adicionar números,

135
00:07:44,620 --> 00:07:48,290
depois, atribuímos essa função a uma variável 'a',
e então invocamos esta variável 'a'. [Tradução: Carlos Lage