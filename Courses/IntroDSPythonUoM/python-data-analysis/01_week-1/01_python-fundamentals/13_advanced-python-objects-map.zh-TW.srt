1
00:00:08,762 --> 00:00:12,930
至此，我們還沒有講太多的物件導向(object-oriented)程式設計的Python。

2
00:00:12,930 --> 00:00:17,240
雖然函數在Python生態系統中扮演重要角色，但Python確實具有類別(classes)

3
00:00:17,240 --> 00:00:21,600
可以有附加的方法(method)，並被具現化為物件(object)。

4
00:00:21,600 --> 00:00:25,350
現在，這門課程並不是關於在Python中，物件的細節

5
00:00:25,350 --> 00:00:27,370
或物件導向的程式設計。

6
00:00:27,370 --> 00:00:30,390
實際上，雖然你將在Python中使用很多物件(object)，

7
00:00:30,390 --> 00:00:33,890
你是不太可能會創建新的class，當您使用互動式

8
00:00:33,890 --> 00:00:36,470
環境，因為它是有點太詳細冗長。

9
00:00:36,470 --> 00:00:40,200
但是，我認為重要的是要在Python中了解一些object的細節，

10
00:00:40,200 --> 00:00:41,839
以便您在看到它們時不感到驚訝。

11
00:00:43,300 --> 00:00:47,430
首先，你可以定義一個class，使用class關鍵字，並以冒號結尾。

12
00:00:48,470 --> 00:00:51,550
任何縮進低於此，是在class的範圍內。

13
00:00:52,580 --> 00:00:56,080
在Python中class的名稱一般稱使用camel大小寫，

14
00:00:56,080 --> 00:00:59,070
這意味著每個單詞的第一個字元用大寫。

15
00:01:00,070 --> 00:01:04,580
您不需要在物件中聲明變數，您只需開始使用它們。

16
00:01:04,580 --> 00:01:06,730
此外class的變數可以被聲明。

17
00:01:06,730 --> 00:01:10,510
這些只是在所有實例(instances)之間共享的變數。

18
00:01:10,510 --> 00:01:13,730
所以我們說，在此示例中，預設值為

19
00:01:13,730 --> 00:01:16,430
所有人都是屬於資訊學校。

20
00:01:18,010 --> 00:01:20,760
在這裡，不是很有用，但我要顯示是為了它的完整性。

21
00:01:22,520 --> 00:01:26,480
要定義一種方法(method)，你只要寫它像你寫函數(function)一樣。

22
00:01:26,480 --> 00:01:30,420
一個不同的是，要能夠使用實例，在其中這一方法

23
00:01:30,420 --> 00:01:34,480
被援引的，你必須在方法的簽名中包含self.。

24
00:01:35,490 --> 00:01:39,800
同樣，如果你想引用實例變數設置在物件上的，

25
00:01:39,800 --> 00:01:42,590
你將self放在他們單詞的前頭，加上句號。

26
00:01:43,600 --> 00:01:48,020
例如，在此定義中的一個人，我們寫了兩種方法(method)。

27
00:01:48,020 --> 00:01:50,280
設置名稱和設置的位置。

28
00:01:50,280 --> 00:01:54,800
這兩個變化實例綁定的變數，分別稱為名稱和位置。

29
00:01:56,220 --> 00:01:58,860
當我們運行此單元格時，我們沒有看到輸出。

30
00:01:58,860 --> 00:02:02,950
class存在，但我們還沒有創建任何object。

31
00:02:02,950 --> 00:02:06,290
我們可以具現化這個class，通過調用這個class名稱，

32
00:02:06,290 --> 00:02:07,630
背後加空括號。

33
00:02:08,970 --> 00:02:12,870
然後我們可以調用它的函數功能，列印出class屬性，使用

34
00:02:12,870 --> 00:02:15,170
點標記法(dot-notation)，這在大多數語言中是常見的。

35
00:02:16,290 --> 00:02:19,730
這裡有一些暗指含義，在Python的物件導向程式設計中，

36
00:02:19,730 --> 00:02:22,910
你應該可以從這個簡單的例子領會。

37
00:02:22,910 --> 00:02:27,260
首先，在Python中的物件不具有私有或受保護成員。

38
00:02:27,260 --> 00:02:28,740
如果具現化一個物件，

39
00:02:28,740 --> 00:02:33,140
你對該物件的任何方法或屬性有完全存取權。

40
00:02:33,140 --> 00:02:34,480
第二，不需要

41
00:02:34,480 --> 00:02:38,200
用顯式的構造函數(constructor)，當創建Python的物件。

42
00:02:38,200 --> 00:02:42,370
如果你想要，你可以添加一個建構函式，通過聲明

43
00:02:42,370 --> 00:02:44,180
雙底線的方法。

44
00:02:45,590 --> 00:02:49,740
我不想花太多時間在Python的物件(object)，因為有很多

45
00:02:49,740 --> 00:02:53,410
微妙的地方，老實說，大多數物件導向程式的功能，

46
00:02:53,410 --> 00:02:57,715
在Python不是真的那麼重要，對資料科學入門的課來說。

47
00:02:57,715 --> 00:02:59,235
如果你更有興趣，

48
00:02:59,235 --> 00:03:03,815
我建議您從Python教程中查看Python文檔。

49
00:03:03,815 --> 00:03:07,550
這是對語言的object特徵相當完整的概述，並且

50
00:03:07,550 --> 00:03:09,836
將有一些參考資料在課程的資源中。

51
00:03:11,859 --> 00:03:16,940
Map函數是Python中函數程式語言的基礎之一。

52
00:03:16,940 --> 00:03:21,310
函數程式語言是一種程式範例，您在其中明確聲明

53
00:03:21,310 --> 00:03:25,600
所有可以通過執行給定函數而改變的參數。

54
00:03:25,600 --> 00:03:29,980
因此，函數程式語言被稱為沒有副作用的，因為

55
00:03:29,980 --> 00:03:35,270
有一個軟體合約，規定當使用函數時，什麼是可以實際改變的。

56
00:03:35,270 --> 00:03:38,930
現在，Python並不是純粹的函數程式語言。

57
00:03:38,930 --> 00:03:41,840
因為你可以有很多函數的副作用，並且你不一定非

58
00:03:41,840 --> 00:03:44,790
傳遞一切參數你有興趣去改變的。

59
00:03:45,880 --> 00:03:49,200
但是函數程式語言使得一個人更加重視

60
00:03:49,200 --> 00:03:50,840
同時將操作連結在一起。

61
00:03:50,840 --> 00:03:55,230
這真的是一種在很多資料科學的基本主題和

62
00:03:55,230 --> 00:03:57,400
特別是資料的清理。

63
00:03:57,400 --> 00:04:00,520
所以，函數程式語言方法經常在Python中使用，

64
00:04:00,520 --> 00:04:04,826
並且不是不常見到函數的參數，它們本身也是一個函數。

65
00:04:04,826 --> 00:04:10,710
map內置功能是Python的函數程式語言功能的一個例子，

66
00:04:10,710 --> 00:04:15,140
我認為聯繫在一起這語言的一些方面。

67
00:04:15,140 --> 00:04:17,970
map的函數如下所示。

68
00:04:17,970 --> 00:04:22,220
第一個參數是你想要執行的函數，第二個參數，

69
00:04:22,220 --> 00:04:25,610
和下面的每個參數，是可以反覆運算後的東西。

70
00:04:26,640 --> 00:04:29,400
所有可反覆運算的參數都解開在一起，

71
00:04:29,400 --> 00:04:31,950
傳遞到給定的函數。

72
00:04:31,950 --> 00:04:35,110
這就是有點神秘，所以讓我們來看一個例子。

73
00:04:35,110 --> 00:04:37,120
假設我們有兩個數字列表，

74
00:04:37,120 --> 00:04:41,290
也許從兩個不同的商店的價格，完全相同的項目。

75
00:04:41,290 --> 00:04:44,280
我們想找到我們必須支付的最低價，

76
00:04:44,280 --> 00:04:47,510
如果我們在兩家商店之間買到便宜的商品。

77
00:04:47,510 --> 00:04:51,050
要做到這一點，我們可以將遍歷每個列表，比較項目和

78
00:04:51,050 --> 00:04:52,860
選擇最便宜的。

79
00:04:52,860 --> 00:04:56,000
用map，我們可以做這種比較在單個語句中。

80
00:04:57,230 --> 00:05:00,490
但是，當我們去列印出來，我們看到我們得到奇怪的參考值

81
00:05:00,490 --> 00:05:03,360
而不是我們期待的項目列表。

82
00:05:03,360 --> 00:05:05,950
這被稱為懶惰評估。

83
00:05:05,950 --> 00:05:10,010
在Python中，map函數返回給你一個map物件(object)。

84
00:05:10,010 --> 00:05:14,010
實際上並沒有嘗試在兩個項目上運行min函數，

85
00:05:14,010 --> 00:05:16,490
直到你查看裡面的值。

86
00:05:16,490 --> 00:05:19,330
這是一個有趣的語言設計模式，和

87
00:05:19,330 --> 00:05:22,460
它常用的在處理大資料時。

88
00:05:22,460 --> 00:05:26,700
這使得我們有非常有效的記憶體管理

89
00:05:26,700 --> 00:05:29,080
即使是複雜的計算。

90
00:05:30,430 --> 00:05:34,470
map是可以反覆運算，就像列表和元組，因此我們可以使用for迴圈

91
00:05:34,470 --> 00:05:36,560
來查看map中的所有值。

92
00:05:38,430 --> 00:05:41,980
這種傳遞函數和數據結構，應用到它們應該被用的，

93
00:05:41,980 --> 00:05:44,360
這是函數程式語言的標誌。

94
00:05:44,360 --> 00:05:47,840
它是非常常見在數據分析和清理。

95
00:05:47,840 --> 00:05:51,040
這裡是一個問題你可以嘗試，彙集了一些任務

96
00:05:51,040 --> 00:05:53,300
你可能期待在資料清理去做。