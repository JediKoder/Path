至此，我們還沒有講太多的物件導向(object-oriented)程式設計的Python。 雖然函數在Python生態系統中扮演重要角色，但Python確實具有類別(classes) 可以有附加的方法(method)，並被具現化為物件(object)。 現在，這門課程並不是關於在Python中，物件的細節 或物件導向的程式設計。 實際上，雖然你將在Python中使用很多物件(object)， 你是不太可能會創建新的class，當您使用互動式 環境，因為它是有點太詳細冗長。 但是，我認為重要的是要在Python中了解一些object的細節， 以便您在看到它們時不感到驚訝。 首先，你可以定義一個class，使用class關鍵字，並以冒號結尾。 任何縮進低於此，是在class的範圍內。 在Python中class的名稱一般稱使用camel大小寫， 這意味著每個單詞的第一個字元用大寫。 您不需要在物件中聲明變數，您只需開始使用它們。 此外class的變數可以被聲明。 這些只是在所有實例(instances)之間共享的變數。 所以我們說，在此示例中，預設值為 所有人都是屬於資訊學校。 在這裡，不是很有用，但我要顯示是為了它的完整性。 要定義一種方法(method)，你只要寫它像你寫函數(function)一樣。 一個不同的是，要能夠使用實例，在其中這一方法 被援引的，你必須在方法的簽名中包含self.。 同樣，如果你想引用實例變數設置在物件上的， 你將self放在他們單詞的前頭，加上句號。 例如，在此定義中的一個人，我們寫了兩種方法(method)。 設置名稱和設置的位置。 這兩個變化實例綁定的變數，分別稱為名稱和位置。 當我們運行此單元格時，我們沒有看到輸出。 class存在，但我們還沒有創建任何object。 我們可以具現化這個class，通過調用這個class名稱， 背後加空括號。 然後我們可以調用它的函數功能，列印出class屬性，使用 點標記法(dot-notation)，這在大多數語言中是常見的。 這裡有一些暗指含義，在Python的物件導向程式設計中， 你應該可以從這個簡單的例子領會。 首先，在Python中的物件不具有私有或受保護成員。 如果具現化一個物件， 你對該物件的任何方法或屬性有完全存取權。 第二，不需要 用顯式的構造函數(constructor)，當創建Python的物件。 如果你想要，你可以添加一個建構函式，通過聲明 雙底線的方法。 我不想花太多時間在Python的物件(object)，因為有很多 微妙的地方，老實說，大多數物件導向程式的功能， 在Python不是真的那麼重要，對資料科學入門的課來說。 如果你更有興趣， 我建議您從Python教程中查看Python文檔。 這是對語言的object特徵相當完整的概述，並且 將有一些參考資料在課程的資源中。 Map函數是Python中函數程式語言的基礎之一。 函數程式語言是一種程式範例，您在其中明確聲明 所有可以通過執行給定函數而改變的參數。 因此，函數程式語言被稱為沒有副作用的，因為 有一個軟體合約，規定當使用函數時，什麼是可以實際改變的。 現在，Python並不是純粹的函數程式語言。 因為你可以有很多函數的副作用，並且你不一定非 傳遞一切參數你有興趣去改變的。 但是函數程式語言使得一個人更加重視 同時將操作連結在一起。 這真的是一種在很多資料科學的基本主題和 特別是資料的清理。 所以，函數程式語言方法經常在Python中使用， 並且不是不常見到函數的參數，它們本身也是一個函數。 map內置功能是Python的函數程式語言功能的一個例子， 我認為聯繫在一起這語言的一些方面。 map的函數如下所示。 第一個參數是你想要執行的函數，第二個參數， 和下面的每個參數，是可以反覆運算後的東西。 所有可反覆運算的參數都解開在一起， 傳遞到給定的函數。 這就是有點神秘，所以讓我們來看一個例子。 假設我們有兩個數字列表， 也許從兩個不同的商店的價格，完全相同的項目。 我們想找到我們必須支付的最低價， 如果我們在兩家商店之間買到便宜的商品。 要做到這一點，我們可以將遍歷每個列表，比較項目和 選擇最便宜的。 用map，我們可以做這種比較在單個語句中。 但是，當我們去列印出來，我們看到我們得到奇怪的參考值 而不是我們期待的項目列表。 這被稱為懶惰評估。 在Python中，map函數返回給你一個map物件(object)。 實際上並沒有嘗試在兩個項目上運行min函數， 直到你查看裡面的值。 這是一個有趣的語言設計模式，和 它常用的在處理大資料時。 這使得我們有非常有效的記憶體管理 即使是複雜的計算。 map是可以反覆運算，就像列表和元組，因此我們可以使用for迴圈 來查看map中的所有值。 這種傳遞函數和數據結構，應用到它們應該被用的， 這是函數程式語言的標誌。 它是非常常見在數據分析和清理。 這裡是一個問題你可以嘗試，彙集了一些任務 你可能期待在資料清理去做。