1
00:00:08,706 --> 00:00:09,959
在本單元的其餘部分，

2
00:00:09,959 --> 00:00:13,750
我將提供Python程式語言的基本概述。

3
00:00:13,750 --> 00:00:15,890
如果你有編寫程式的背景，

4
00:00:15,890 --> 00:00:19,530
這個概述應該足以幫助你在本課程的其餘部分

5
00:00:19,530 --> 00:00:22,090
和本專業課程裏的其他課程中取得成功。

6
00:00:22,090 --> 00:00:24,330
如果你沒有編寫程式的經驗，或者

7
00:00:24,330 --> 00:00:28,180
覺得內容太過於挑戰，那麼我會鼓勵你暫時停下來，

8
00:00:28,180 --> 00:00:30,750
並選上一些編寫程式的入門課程。

9
00:00:30,750 --> 00:00:34,320
我的一位同事，Chuck Severance博士為Coursera提供了一個很好的專業課程，

10
00:00:34,320 --> 00:00:36,760
名字為'Python for Everybody'。

11
00:00:36,760 --> 00:00:38,780
你可以在Coursera課程資料中找到該連結。

12
00:00:39,980 --> 00:00:44,240
Coursera系統允許你以兩種方式從瀏覽器運行Python的程式。

13
00:00:44,240 --> 00:00:47,390
首先，我們可以使用出現在影片內的問題提示，

14
00:00:47,390 --> 00:00:50,030
你可以在瀏覽器裏嘗試並解決這個問題。

15
00:00:50,030 --> 00:00:52,070
這是一個Coursera平台的新功能，

16
00:00:52,070 --> 00:00:54,840
我們將在接下來的幾個課程中嘗試一下。

17
00:00:54,840 --> 00:00:58,080
其次，Coursera系統已經與Jupyter電腦筆記本相整合。

18
00:00:59,120 --> 00:01:02,370
這些電腦筆記本允許你將程式分解為所謂的單元，

19
00:01:02,370 --> 00:01:04,710
並根據需要執行來這些單元。

20
00:01:04,710 --> 00:01:07,640
關於這些電腦筆記本的好處是它們提供了一個半永久性

21
00:01:07,640 --> 00:01:10,330
的存儲空間用來學習，你可以進行實驗

22
00:01:10,330 --> 00:01:14,230
和寫程式，而不需要在電腦上安裝任何東西。

23
00:01:14,230 --> 00:01:17,300
所有的作業將在Jupyter筆記本中完成，但你也可以自行

24
00:01:17,300 --> 00:01:21,390
下載並安裝Python，Jupyter，和所有你需要的，相關的程式庫

25
00:01:21,390 --> 00:01:24,300
在你自己的電腦上，如果你比較喜歡。

26
00:01:24,300 --> 00:01:27,260
我們的教程助理將概述這個安裝過程。

27
00:01:27,260 --> 00:01:31,170
在下一個影片中，如何在你自己的電腦安裝Jupyter電腦筆記本，

28
00:01:31,170 --> 00:01:34,890
為那些有興趣的人。我將在課程中概述如何在Coursera環境中

29
00:01:34,890 --> 00:01:37,360
使用這些電腦筆記本。

30
00:01:38,540 --> 00:01:41,470
但現在，讓我們來討論一些基本的Python。

31
00:01:41,470 --> 00:01:45,040
首先，Python是一種高級程式語言，這意味著它是針對

32
00:01:45,040 --> 00:01:46,830
人的能夠理解，而不是機器來進行優化的。

33
00:01:46,830 --> 00:01:51,210
它也是一種直譯語言，這意味著它不直接編譯為

34
00:01:51,210 --> 00:01:56,680
機器碼，更重要的是，它通常以互動方式來使用。

35
00:01:56,680 --> 00:01:59,750
這可能會有很大差異，如果你習慣於像Java或C這類的程式，

36
00:01:59,750 --> 00:02:04,930
你寫程式，編譯它，運行並查看它的輸出。

37
00:02:04,930 --> 00:02:08,680
在Python中，你可以啟動互動式直譯器，開始編寫程式，

38
00:02:08,680 --> 00:02:13,240
直譯器會進行評估你編寫的每一行程式。

39
00:02:13,240 --> 00:02:15,090
這是非常有用的，在對於需要大量調查研究的程式工作來說，

40
00:02:15,090 --> 00:02:20,100
對比於那些先需要大量設計的程式工作。

41
00:02:20,100 --> 00:02:22,320
Shell腳本就是其中的一個例子。

42
00:02:22,320 --> 00:02:24,415
數據清理是另一個。

43
00:02:24,415 --> 00:02:27,750
雖然你可以編寫完全的腳本然後執行程式，類似你可能

44
00:02:27,750 --> 00:02:29,310
用過的其他程式語言，

45
00:02:29,310 --> 00:02:32,030
但我們在這整個專業化課程中，

46
00:02:32,030 --> 00:02:33,429
將以這種互動方式來使用Python。

47
00:02:35,030 --> 00:02:39,260
來自Java或C背景的一些程式設計師的一個共同驚喜是，

48
00:02:39,260 --> 00:02:44,100
Python是一種動態類型的語言，類似於JavaScript等語言。

49
00:02:44,100 --> 00:02:46,120
這意味著當你聲明一個變數時，

50
00:02:46,120 --> 00:02:49,390
你可以在上一行將其指定為整數，並在下一行將其指定為字符串。

51
00:02:50,670 --> 00:02:52,450
由於沒有編譯(compile)步驟，

52
00:02:52,450 --> 00:02:54,910
你沒有任何人來幫助你處理變數的類型。

53
00:02:54,910 --> 00:02:58,700
當你使用它時，你需要檢查功能存在與否? 或

54
00:02:58,700 --> 00:03:02,530
嘗試使用其功能，並抓到可能發生的任何錯誤。

55
00:03:02,530 --> 00:03:05,970
Python的動態類型是特別有益的，

56
00:03:05,970 --> 00:03:09,200
當以互動方式使用時，因為它允許你快速的設置和

57
00:03:09,200 --> 00:03:13,460
修改變量內容，而無需擔心變數的

58
00:03:13,460 --> 00:03:14,559
底層語法定義。

59
00:03:15,590 --> 00:03:18,030
好的，我們來舉個例子。

60
00:03:18,030 --> 00:03:21,250
對於我將向你展示的所有程式例子，你將可以在課程資源的部分

61
00:03:21,250 --> 00:03:24,970
找到筆記本的註釋版本，而且有更多註解。

62
00:03:24,970 --> 00:03:28,410
如果你願意，歡迎隨時跟隨那裏，或創建一個新的筆記本，

63
00:03:28,410 --> 00:03:30,060
積極寫程式，如果你喜歡的話。

64
00:03:31,140 --> 00:03:33,710
Python只有很少的內定程式

65
00:03:33,710 --> 00:03:37,110
事實上，如果你只想設置一些變數的值，

66
00:03:37,110 --> 00:03:41,240
並將這些變數加在一起的結果輸出，你可以用三行程式來做。

67
00:03:41,240 --> 00:03:43,570
在這個例子中，我將寫三個陳述式。

68
00:03:43,570 --> 00:03:48,380
前兩個設置變數x和y，每個都是整數值。

69
00:03:48,380 --> 00:03:49,420
然後我們做一個加法。

70
00:03:50,420 --> 00:03:53,710
我們可以通過點擊shift+enter來運行這個單元，或

71
00:03:53,710 --> 00:03:57,000
點擊工具欄中的'進行'圖示。

72
00:03:57,000 --> 00:04:00,150
程式的輸出會立即印出來。

73
00:04:00,150 --> 00:04:03,610
如果你在非互動模式下使用Python，則不會印出任何結果。

74
00:04:03,610 --> 00:04:07,960
但是，由於我們以互動模式使用它，我們立即獲得該值。

75
00:04:07,960 --> 00:04:11,740
真正發生的是瀏覽器將你的Python程式

76
00:04:11,740 --> 00:04:13,550
發送到雲端中的一台電腦機器，

77
00:04:13,550 --> 00:04:18,100
該電腦機器執行Python 3直譯器的代碼，並將結果發送回來。

78
00:04:19,640 --> 00:04:24,880
我們可以看到，在執行一個單元後，下面為我們創建了一個新的空單元。

79
00:04:24,880 --> 00:04:28,200
如果我們只是放x，然後執行，我們得到的是1.

80
00:04:28,200 --> 00:04:31,820
所以重要的是要知道Python直譯器是有狀態的。

81
00:04:31,820 --> 00:04:34,560
也就是說，你的變數存在於單元格之間。

82
00:04:35,710 --> 00:04:39,130
除此之外，如果我們回去改變上一個單元中的某些內容，

83
00:04:39,130 --> 00:04:43,050
我們必須重新執行腳本，以使這些更改發生。

84
00:04:43,050 --> 00:04:46,730
重新啟動並運行所有功能特別有用，因為它會擦除

85
00:04:46,730 --> 00:04:50,670
直譯器狀態，並重新運行當前筆記本中的所有單元。

86
00:04:51,760 --> 00:04:54,310
你會注意到，Python不需要使用

87
00:04:54,310 --> 00:04:57,330
關鍵字，諸如用var來聲明一個變數名稱，或

88
00:04:57,330 --> 00:05:01,680
用分號在行末尾，在其他程式語言中常用的。

89
00:05:01,680 --> 00:05:05,280
Python利用空白來理解函數和迴路的範疇，

90
00:05:05,280 --> 00:05:08,700
以及行尾符號來理解程式語句的結尾。

91
00:05:09,830 --> 00:05:13,680
當然，Python具有諸如函數之類的傳統軟體結構。

92
00:05:13,680 --> 00:05:17,750
這是一個例子，將之前的程式重構成一個函數。

93
00:05:17,750 --> 00:05:21,470
你會看到'def'語句，表明我們正在寫一個函數。

94
00:05:21,470 --> 00:05:24,320
然後作為函數的一部分，每一行都需要

95
00:05:24,320 --> 00:05:26,440
使用製表符(Tab)或縮進幾個空格。

96
00:05:27,510 --> 00:05:31,200
再次，因為我們處於互動式的環境中，當程式語句在

97
00:05:31,200 --> 00:05:35,330
shift+enter上進行評估時，結果將在下面立即印出來。

98
00:05:37,240 --> 00:05:39,110
這是我們第一個互動式程式。

99
00:05:39,110 --> 00:05:43,878
讓你試試，改變這個函數來接受三個參數而不是兩個，

100
00:05:43,878 --> 00:05:46,175
並返回所有這三個參數的總和。

101
00:05:49,048 --> 00:05:52,168
好的，功能很棒，但是它們有一點不同於

102
00:05:52,168 --> 00:05:55,420
其他語言，這裡有一些微妙之處。

103
00:05:55,420 --> 00:05:59,810
首先，由於沒有類型，你不需要設置返回的類型。

104
00:05:59,810 --> 00:06:02,930
其次，你實際上不必使用return語句。

105
00:06:02,930 --> 00:06:06,030
有一個名為'None'的特殊值返回。

106
00:06:06,030 --> 00:06:09,650
None與Java中的null類似，表示缺少或者沒有值。

107
00:06:10,730 --> 00:06:14,820
第三，在Python中，你可以設置參數的預設值。

108
00:06:14,820 --> 00:06:15,980
這裡有個例子，這裡有個例子，

109
00:06:15,980 --> 00:06:20,390
在這個例子中，我們可以重寫add_numbers函數來接受三個參數，

110
00:06:20,390 --> 00:06:23,970
但我們可以設最後的參數
為預設的 None

111
00:06:23,970 --> 00:06:28,220
這意味著你可以使用兩個值或三個值來調用add_numbers，而

112
00:06:28,220 --> 00:06:31,100
不必重寫函數來重載(Overloading)它。

113
00:06:32,290 --> 00:06:34,650
這裡有一個重要的暗示含義。

114
00:06:34,650 --> 00:06:38,580
所有可選用的參數，那些有預設值的，

115
00:06:38,580 --> 00:06:42,030
都需要放在函數聲明的最末尾。

116
00:06:42,030 --> 00:06:46,100
這也意味著你可以傳遞可選參數為一個標記值。

117
00:06:46,100 --> 00:06:48,600
以下是有標記參數的例子。

118
00:06:48,600 --> 00:06:52,135
我們可以重寫該函數，以便有兩個可選參數。

119
00:06:52,135 --> 00:06:55,300
如果我們只用兩個數字來呼叫該函數，但也

120
00:06:55,300 --> 00:06:58,690
設置了標記值，我們必須有明確地資料名稱，

121
00:06:58,690 --> 00:07:02,670
並將已標記的參數設置為True時，來調用該函數。

122
00:07:02,670 --> 00:07:05,650
到現在，你也看到了使用print語句。

123
00:07:05,650 --> 00:07:08,000
我們將更詳細地介紹'字串'(strings)，

124
00:07:08,000 --> 00:07:11,950
print將會拿一個項目，嘗試將其轉換為字串，然後輸出。

125
00:07:11,950 --> 00:07:14,910
我們不會在直譯器的互動模式中使用這麼多print，但是

126
00:07:14,910 --> 00:07:18,110
當我們要從單一個單元格來印出多個輸出值時，這很有用。

127
00:07:19,220 --> 00:07:22,840
好的，關於基本的Python函數最後一句話。

128
00:07:22,840 --> 00:07:25,740
在 Python 中，可以將一個變數分配給一個函數。

129
00:07:25,740 --> 00:07:27,910
這可能看起來完全正常，或

130
00:07:27,910 --> 00:07:31,410
完全奇怪，取決於你的編寫程式背景。

131
00:07:31,410 --> 00:07:34,950
通過指定一個函數到一個變數，你可以將該變數傳遞給

132
00:07:34,950 --> 00:07:38,830
其他函數，這會允許一些基本的功能程式。

133
00:07:38,830 --> 00:07:41,160
我們會在稍後課程再談一談。

134
00:07:41,160 --> 00:07:44,620
這裡是一個例子，我們定義一個函數來加數字，

135
00:07:44,620 --> 00:07:48,290
然後我們將該函數賦給一個變數，然後我們調用該變數。