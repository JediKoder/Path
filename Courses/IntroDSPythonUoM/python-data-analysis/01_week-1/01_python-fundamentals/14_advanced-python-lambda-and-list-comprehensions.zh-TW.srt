1
00:00:08,907 --> 00:00:12,328
你可能已經看過這個關鍵字lambda，出現在本週的內容中，

2
00:00:12,328 --> 00:00:16,196
當你花費越來越多的時間與Python和數據科學時，你將看到更多。

3
00:00:16,196 --> 00:00:17,880
數據科學裏。

4
00:00:17,880 --> 00:00:21,770
Lambda是Python的方法創建不具名函數。

5
00:00:21,770 --> 00:00:24,630
這些與其他函數相同，但沒有名稱。

6
00:00:24,630 --> 00:00:26,060
意圖在於它們很簡單或

7
00:00:26,060 --> 00:00:29,440
短暫使用，它容易，只需要在一行中就能夠寫出函數，

8
00:00:29,440 --> 00:00:32,169
而不必麻煩的去創建一個有名稱函數。

9
00:00:33,300 --> 00:00:35,460
Lambda語法是相當簡單的。

10
00:00:35,460 --> 00:00:37,590
但可能需要一點時間去適應。

11
00:00:38,610 --> 00:00:42,270
你聲明一個lambda函數，用關鍵詞lambda，後跟一個列表

12
00:00:42,270 --> 00:00:47,610
參數，其次是一個冒號，然後一個單一的運算式，這是關鍵。

13
00:00:47,610 --> 00:00:50,596
那裡只有一個運算式在lambda中要被評估。

14
00:00:50,596 --> 00:00:54,299
執行的lambda回復運算式的值。

15
00:00:55,570 --> 00:00:58,520
Lambda的回復是一個函數引用

16
00:00:58,520 --> 00:01:01,550
所以在這種情況下，您將執行my_function和

17
00:01:01,550 --> 00:01:03,290
並傳入三個不同的參數。

18
00:01:04,290 --> 00:01:07,530
請注意，你不能有lambda參數的預設值，和

19
00:01:07,530 --> 00:01:10,870
你不能在lambda本身內部有複雜的邏輯，

20
00:01:10,870 --> 00:01:12,950
因為lambda限於單個運算式。

21
00:01:14,130 --> 00:01:18,420
所以lambda是真的比較限制的，比起完整的函數功能定義。

22
00:01:18,420 --> 00:01:22,360
但我認為在簡單的小數據清理任務，他們是非常有用的。

23
00:01:22,360 --> 00:01:25,040
你會在網站上看到很多他們的例子。

24
00:01:25,040 --> 00:01:27,530
所以，你應該能夠讀和寫lambda函數。

25
00:01:27,530 --> 00:01:28,510
讓我們在這裡試一試。

26
00:01:30,800 --> 00:01:33,530
我們在Python中已經學了不少關於序列(sequences)。

27
00:01:33,530 --> 00:01:36,470
元組(tuple)，列表(list)、字典(dictionary)等等。

28
00:01:37,510 --> 00:01:40,580
序列是我們可以遍歷的結構和

29
00:01:40,580 --> 00:01:44,590
往往我們創建這些經由迴圈(loop)或從一個文件檔中讀取數據資料。

30
00:01:45,850 --> 00:01:50,720
Python已經內建了使用更簡潔的語法來創建這些集合，

31
00:01:50,720 --> 00:01:53,140
叫做list comprehensions。

32
00:01:54,230 --> 00:01:55,690
這裡有個例子，這裡有個例子，

33
00:01:55,690 --> 00:01:58,380
首先我們寫一個小的for-loop。

34
00:01:58,380 --> 00:02:02,740
這裡我在0到1000之間迭代，然後用模數運算來

35
00:02:02,740 --> 00:02:07,230
檢查數字除以2是否有任何小數。

36
00:02:07,230 --> 00:02:10,880
如果數字的模數2的結果為零，那麼我知道它是整除，所以

37
00:02:10,880 --> 00:02:13,530
這一定是一個偶數，我會把它添加到我們的列表中。

38
00:02:15,450 --> 00:02:18,360
我們可以用list comprehension來改寫這個，

39
00:02:18,360 --> 00:02:20,980
通過只用一行代碼來循環迭代。

40
00:02:20,980 --> 00:02:24,300
我們用列表中所需的值去開始list comprehension。

41
00:02:24,300 --> 00:02:25,770
在這種情況下，這是一個數字。

42
00:02:25,770 --> 00:02:31,030
然後我們把它放在for-loop，然後最後，我們添加任何條件條款。

43
00:02:31,030 --> 00:02:33,920
你可以看到，這是更緊湊的格式。

44
00:02:33,920 --> 00:02:35,690
而且它往往也會更快。

45
00:02:36,910 --> 00:02:40,890
就像lambdas一樣，list comprehensions是濃縮的格式

46
00:02:40,890 --> 00:02:44,030
它們可提供可讀性和性能優勢和

47
00:02:44,030 --> 00:02:49,190
你常常會發現它們被用在數據科學教程或在stack overflow網絡。

48
00:02:49,190 --> 00:02:53,170
但你不需要在本課程中的作業中使用它們。

49
00:02:53,170 --> 00:02:56,702
在這裡，你為什麼不嘗試將一個函數轉換為list comprehensions。