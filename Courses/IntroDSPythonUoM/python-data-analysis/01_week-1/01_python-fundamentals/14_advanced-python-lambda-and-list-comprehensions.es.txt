Probablemente hayas visto que aparecía la palabra
clave "lambda" entre el contenido de esta semana, y seguramente la verás con mayor frecuencia 
al pasar más tiempo con Python y la ciencia de datos. "Lambda" es la manera que tiene
Python para crear funciones anónimas. Son similares a otras funciones,
pero no tienen nombre. La intención es que
sean simples o de corta duración, y fáciles de
escribirlas en una sola línea en vez de tener que preocuparse 
de crear una función con nombre. La sintaxis lambda
es bastante simple. Pero puede tomar un poco
de tiempo acostumbrarse a ellas. Declaras una función lambda con la
palabra "lambda" seguida de una lista de argumentos, luego van dos puntos y
después una sola expresión, y esto es clave. En una función lambda hay sólo
una expresión a evaluar. La ejecución de lambda retorna
el valor de la expresión. El retorno de un lambda
es una referencia. Así que en este caso,
se ejecutará "my_function" y se pasan tres
parámetros diferentes. Ten en cuenta que los parámetros lambda
no pueden tener valores por defecto y no se puede tener una lógica compleja
dentro de la propia función lambda pues estás limitado
a una simple expresión. Las lambdas son mucho más limitadas
que las definiciones de funciones completas. Pero creo que son muy útiles
para tareas sencillas de limpieza de datos. Encontrarás muchos ejemplos
con lambdas en la web. Deberías ser capaz de
leer y escribir lambdas. Probemos ahora... Hemos aprendido mucho
sobre secuencias en Python. tuplas, listas,
diccionarios, etc. Las secuencias son estructuras
sobre las que podemos iterar, y A menudo las creamos a través de bucles
o leyendo los datos de un archivo. Python ha incorporado soporte para la
creación de estas colecciones usando una sintáxis más abreviada denominada
"listas de comprensión" Pero la ciencia forense no es muy buena determinando Mens Rea, la intención. Primero escribimos
un bucle "for". Aquí estoy iterando entre cero y 1.000
para luego comprobar con el operador módulo si hay resto decimal
al dividir el número por dos. Si el resultado es cero,
entonces sé que el número es par.
Y lo añado a la lista. Podemos reescribir esto como 
una "lista de comprensión" Escribiendo la
iteración en una línea. Comenzamos con el valor
que queremos en la lista. En este caso,
es un número. Luego lo pongo en el bucle "for" y
finalmente, agrego una condición. Esto tiene un formato
mucho más compacto. Y también tiende
a ser más rápido. Al igual que las lambdas, las listas de comprensión
tienen un formato condensado que las hace más legibles,
tienen mayor rendimiento y y las encontrarás en tutoriales de ciencia de datos
o "Stack Overflow". Pero no estás obligado a utilizarlas
en las tareas del curso. ¿Por qué no intentas convertir ahora una
función en una lista de comprensión?