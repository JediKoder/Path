我們討論了字串(string)，當我們討論列表(list)和分切(slicing)時，並且 你已經看到了拆解strings的方法，通過使用分割函數， 或者通過直接索引。 Python中的strings也可能有點令人不容易理解，我想分享 一些關於如何處理strings的細節，以便你能了解它們。 Strings在Python-3是基於Unicode。 在早期計算時期，字串的字元被限制為256個不同 的值之一。 這足以得到所有的大寫或 小寫的拉丁字符，加上表示單位數的數字。 這種語言被稱為ASCII，是相當簡潔的。 但是世界不僅僅是拉丁字元，還需要支持 非英語語言，以及不常用的字元， 但是常用在其他的地方，像數學運算符號。 Unicode轉換格式，或簡稱UTF，是試圖解決這個問題的嘗試。 它可以用來代表超過一百萬個不同的字元。 這不僅包括你可能料想到的人類語言， 還包括像emojis這樣的符號。 Python3自動預設使用Unicode，因此 在處理國際字元集時沒有問題。 除Unicode之外，Python使用特殊語言來 設置字串輸出的格式。 動態類型的一個挑戰是，有點不太清楚，什麼時候 你必須自己進行類型轉換， 我們在上一個講課中看到，如果我們印出一個名字和 數字，我們不能使用串聯而不先調用str函數 將數字首先轉換成字串。 這造成了很多令人討厭的程式，每個操作你想要 串聯的，都被包卷在這個str函數中。 Python字串格式處理的迷你語言允許你編寫 一個字串語句，指示要評估的變數的預留位置。 然後，你可以傳遞這些變量，用命名或有順序的參數， Python會為你處理字串操作。 這裡有個例子，這裡有個例子， 想像我們有個採購訂單的詳細資料和 一個字典(dictionary)，其中包括一些項目，價格和人的名字。 我們可以寫一個銷售的字串格式語句，包含這些項目 使用大括號。 然後，我們可以調用該字串的格式方法， 並適當的傳遞我們想要替換的值。 字串格式處理語言可以讓你做得更多其他的。 你可以控制許多不同的事情，例如小數位， 浮點數，或者是否要在正數前面 用加號，或者將字串的對齊方式設置為左對齊或右對齊。 甚至可以使用科學符號。 我在課程資源中鏈接了有關的資料。 能夠使用字串程式庫和 格式處理語言將是你的第一個作業的重要部分。 這是一個簡短的講課， 但字串操作是數據清理的重要部分。 你將學習更多關於字串操作通過在這個課程中 的作業。 在下一個影片中， 我們的研究生助理將向你展示如何將一些基本 數據分析結合在一起，通過讀入和寫入有分隔標記的數據文件。