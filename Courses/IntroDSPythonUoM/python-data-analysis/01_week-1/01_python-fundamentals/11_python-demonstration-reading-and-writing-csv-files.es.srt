1
00:00:08,987 --> 00:00:12,782
Bienvenido al tutorial de hoy, donde
aprenderemos los fundamentos de la iteración

2
00:00:12,782 --> 00:00:16,370
a través de un archivo CSV para crear
diccionarios y recopilar resumenes estadísticos.

3
00:00:17,770 --> 00:00:22,870
Primero, vamos a importar el módulo CSV,
que nos ayudará a leer nuestro archivo CSV.

4
00:00:24,560 --> 00:00:26,732
Utilizando alguna
magia de iPython

5
00:00:26,732 --> 00:00:31,557
Vamos a configurar en 2 la precisión 
para la impresión del punto flotante.

6
00:00:31,557 --> 00:00:35,772
Ahora vamos a leer el archivo mpg.csv
usando "csv.DictReader" y

7
00:00:35,772 --> 00:00:38,530
convirtiéndolo en una
lista de diccionarios.

8
00:00:39,880 --> 00:00:42,170
Veamos los primeros tres
elementos de nuestra lista.

9
00:00:44,100 --> 00:00:48,190
Podemos ver que los diccionarios en la lista
tienen los nombres de las columnas del CSV

10
00:00:48,190 --> 00:00:51,710
como claves y los datos específicos
de cada vehículo son los valores del diccionario.

11
00:00:53,460 --> 00:00:55,970
La longitud de nuestra
lista es 234

12
00:00:55,970 --> 00:01:00,240
lo cual significa que tenemos un diccionario para
cada uno de los 234 vehículos del archivo CSV.

13
00:01:02,490 --> 00:01:06,308
Podemos ver cuáles son los nombres de
las columnas del CSV mediante el método "key".

14
00:01:08,354 --> 00:01:13,670
Supongamos que queremos determinar las millas por galón
promedio en ciudad en todos los vehículos del archivo CSV

15
00:01:15,080 --> 00:01:19,430
Sumamos la entrada MPG en ciudad en todos
los diccionarios de nuestra lista y

16
00:01:19,430 --> 00:01:20,629
dividimos por la
longitud de la lista.

17
00:01:21,770 --> 00:01:24,860
Como el tipo de todos los valores
de nuestro diccionario son cadenas,

18
00:01:24,860 --> 00:01:27,830
Necesitamos hacer las conversiones
a "float"  para realizar las operaciones matemáticas.

19
00:01:30,502 --> 00:01:36,420
Del mismo modo, podemos encontrar el MPG medio
en autopista para todos los  vehículos del archivo CSV.

20
00:01:36,420 --> 00:01:40,063
Y tiene sentido que la economía media
del combustible de la carretera sea más alta que

21
00:01:40,063 --> 00:01:40,609
en la ciudad.

22
00:01:42,600 --> 00:01:44,490
Ahora, veamos un
ejemplo más complejo.

23
00:01:45,815 --> 00:01:49,180
Digamos que queremos saber el 
MPG promedio en ciudad

24
00:01:49,180 --> 00:01:51,390
Agrupado por el número
de cilindros que tiene el automóvil.

25
00:01:52,570 --> 00:01:56,420
Creando un conjunto de valores en
la entrada del cilindro en los diccionarios

26
00:01:56,420 --> 00:01:59,499
Obtendremos los niveles únicos
para las cantidades de cilindros.

27
00:02:00,540 --> 00:02:04,530
Vemos que en nuestro conjunto de datos
tenemos vehículos con 4, 5, 6 y 8 cilindros.

28
00:02:06,160 --> 00:02:10,600
En primer lugar, crearemos una lista vacía,
donde almacenaremos nuestros cálculos.

29
00:02:10,600 --> 00:02:14,510
A continuación, iteramos
por los niveles de cilindros.

30
00:02:14,510 --> 00:02:16,359
Y luego iteraremos sobre
todos los diccionarios.

31
00:02:18,420 --> 00:02:21,020
Si el nivel del cilindro para
el diccionario en el que estamos

32
00:02:21,020 --> 00:02:24,710
Coincide con el nivel del cilindro
para el que estamos calculando el promedio,

33
00:02:24,710 --> 00:02:29,730
sumamos el mpg a nuestra variable "summpg"
 e incrementamos el "count".

34
00:02:31,740 --> 00:02:36,750
Una vez que hayamos pasado por todos los diccionarios,
realizamos el cálculo del MPG promedio y

35
00:02:36,750 --> 00:02:37,480
lo agregamos
a nuestra lista.

36
00:02:39,250 --> 00:02:40,471
Para que las
cosas queden mas claras,

37
00:02:40,471 --> 00:02:43,970
Voy a ordenar la lista de menor
a mayor por cantidad de cilindros.

38
00:02:43,970 --> 00:02:48,290
Y podemos ver que la economía de combustible en ciudad
parece estar disminuyendo a medida que el número de

39
00:02:48,290 --> 00:02:49,590
cilindros se incrementa.

40
00:02:51,160 --> 00:02:52,670
Veamos otro
ejemplo similar.

41
00:02:54,408 --> 00:02:57,360
Supongamos que estamos interesados
​​en encontrar el MPG promedio para

42
00:02:57,360 --> 00:02:58,659
las diferentes clases
de vehículos.

43
00:02:59,820 --> 00:03:04,743
Mirando las clases de vehículos 
tenemos de 2 asientos, compacto, mediano,

44
00:03:04,743 --> 00:03:07,320
Minivan, pickup,
subcompacto y suv.

45
00:03:09,160 --> 00:03:13,035
De la misma manera que en el último ejemplo,
iteramos sobre todas las clases del vehículo,

46
00:03:13,035 --> 00:03:15,100
Luego iteramos sobre
todos los diccionarios.

47
00:03:16,580 --> 00:03:17,760
Si la clase de vehículo
para el diccionario

48
00:03:17,760 --> 00:03:21,420
Coincide con la clase para la 
cual estamos calculando el promedio

49
00:03:21,420 --> 00:03:25,130
sumamos el valor a nuestro total,
e incrementamos el "count".

50
00:03:26,890 --> 00:03:30,370
Luego realizamos el cálculo promedio
y lo añadimos a nuestra lista.

51
00:03:31,960 --> 00:03:34,720
Esta vez, vamos a ordenar nuestra lista
de menor a mayor MPG.

52
00:03:35,720 --> 00:03:39,220
Parece que la pickup tiene la peor economía
de combustible y el compacto, la mejor.

53
00:03:40,680 --> 00:03:43,850
Esta fue una mirada de cómo resumir
datos a través de iteraciones.

54
00:03:43,850 --> 00:03:46,948
No te preocupes si esto te
parece un poco ineficiente o tedioso.

55
00:03:46,948 --> 00:03:50,770
La semana que viene, estaremos aprendiendo
acerca de Pandas, una librería de Python que permite

56
00:03:50,770 --> 00:03:54,960
hacer análisis de datos con Python
de manera más fácil, eficiente y potente.

57
00:03:54,960 --> 00:03:55,820
Gracias por vernos.

58
00:03:55,820 --> 00:03:56,640
Espero volver a verte pronto.