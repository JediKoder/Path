1
00:00:08,722 --> 00:00:12,830
Sự thiếu vắng kiểu tĩnh trong python
không có nghĩa là không có nhiều loại.

2
00:00:12,830 --> 00:00:16,738
Ngôn ngữ python được xây dựng trong
hàm gọi kiểu mà sẽ hiển thị cho bạn

3
00:00:16,738 --> 00:00:18,513
kiểu tham chiếu là gì.

4
00:00:18,513 --> 00:00:22,890
Một số các loại phổ biến bao gồm các chuỗi,
không có kiểu như chúng ta đã thảo luận.

5
00:00:22,890 --> 00:00:25,480
Các biến số nguyên và các biến số thực động.

6
00:00:25,480 --> 00:00:28,580
Như chúng ta thấy bạn có thể có các
tham khảo với hàm cũng như

7
00:00:28,580 --> 00:00:30,050
một kiểu hàm cũng tồn tại.

8
00:00:31,640 --> 00:00:34,310
Các đối tượng đã được
nhập liên quan với chúng và

9
00:00:34,310 --> 00:00:37,110
các thuộc tính này có thể là
dữ liệu và các hàm.

10
00:00:37,110 --> 00:00:41,165
Rất nhiều python được xây dựng xung quanh
các loại trình tự hoặc các loại kiểu khác nhau.

11
00:00:41,165 --> 00:00:45,150
Và có ba loại sưu tập gốc
mà chúng ta sẽ nói đến

12
00:00:45,150 --> 00:00:47,710
bộ dữ liệu, danh sách và thư viện.

13
00:00:49,370 --> 00:00:53,028
Một bộ dữ liệu là một một
chuỗi các biến không thay đổi.

14
00:00:53,028 --> 00:00:55,851
Điều đó có nghĩa là một bộ dữ liệu có
các mục theo trình tự nhưng

15
00:00:55,851 --> 00:00:58,680
nó không thể bị thay đổi khi được tạo ra.

16
00:00:58,680 --> 00:01:02,968
Chúng ta viết các bộ dữ liệu sử dụng dấu ngoặc đơn,
chúng ta có thể kết hợp các loại nội dung của

17
00:01:02,968 --> 00:01:03,707
bộ dữ liệu.

18
00:01:03,707 --> 00:01:06,380
Đây là một bộ dữ liệu có bốn mục.

19
00:01:06,380 --> 00:01:08,150
Hai cái là số, hai cái là chuỗi.

20
00:01:09,230 --> 00:01:11,190
Lưu ý là tôi sẽ sử dụng dấu nháy đơn cho

21
00:01:11,190 --> 00:01:14,660
chuỗi, trong khi trước đây
tôi đã sử dụng dấu nháy kép.

22
00:01:14,660 --> 00:01:19,390
Trong python dấu nháy đơn hay kép có thể
được sử dụng để biểu thị giá trị chuỗi.

23
00:01:21,020 --> 00:01:23,880
Danh sách thì tương tự nhưng
chúng có thể thay đổi được vì thế

24
00:01:23,880 --> 00:01:27,440
bạn có thể thay đổi chiều dài của chúng,
số lượng các thành phần và các giá trị thành phần.

25
00:01:28,900 --> 00:01:31,683
Một danh sách được đưa ra
sử dụng dấu ngoặc vuông.

26
00:01:31,683 --> 00:01:35,340
Có một vài cách khác nhau để thay đổi
các nội dung của một danh sách.

27
00:01:35,340 --> 00:01:39,738
Thứ nhất là thông qua chức năng phụ
cho phép bạn thêm các mục mới vào cuối

28
00:01:39,738 --> 00:01:40,467
của danh sách.

29
00:01:42,557 --> 00:01:45,175
Cả danh sách và bộ dữ liệu là những kiểu lặp lại vì thế

30
00:01:45,175 --> 00:01:49,340
bạn có thể viết các vòng lặp để đi qua
mỗi giá trị chúng nắm giữ.

31
00:01:49,340 --> 00:01:53,760
Các chỉ tiêu, nếu bạn muốn tìm mỗi mục trong
danh sách để sử dụng cho một câu lệnh.

32
00:01:53,760 --> 00:01:58,740
Điều này tương tự với mỗi vòng lặp trong
các ngôn ngữ như là java và C# nhưng

33
00:01:58,740 --> 00:02:00,700
lưu ý rằng không có yêu cầu nhập.

34
00:02:03,270 --> 00:02:07,360
Danh sách và bộ dữ liệu cũng có thể được
truy cập như là các mảng trong các ngôn khác,

35
00:02:07,360 --> 00:02:12,000
bằng việc sử dụng dấu ngoặc vuông
được gọi là toán tử chỉ số.

36
00:02:12,000 --> 00:02:15,175
Mục đầu tiên của danh sách
bắt đầu ở điểm 0 và

37
00:02:15,175 --> 00:02:19,013
để lấy độ dài của danh sách, chúng ta
sử dụng hàm lan có sẵn.

38
00:02:19,013 --> 00:02:22,837
Có một số các hàm phổ biến
mà bạn mong đợi như min và

39
00:02:22,837 --> 00:02:26,800
max tìm thấy các giá trị nhỏ nhất và lớn nhất trong
danh sách hoặc bộ dữ liệu được đưa ra.

40
00:02:28,465 --> 00:02:29,410
Danh sách python và

41
00:02:29,410 --> 00:02:34,420
bộ dữ liệu có các phép toán học
cơ bản mà có thể được cho phép.

42
00:02:34,420 --> 00:02:38,100
Ví dụ dấu cộng để nối các danh sách.

43
00:02:38,100 --> 00:02:41,380
Và các dấu sao lặp lại
các giá trị của một danh sách.

44
00:02:41,380 --> 00:02:45,620
Một phép tính phổ biến là
phép tính in.

45
00:02:45,620 --> 00:02:49,810
Phép tính này xem xét quan hệ thành viên
và trả về giá trị boolean đúng hoặc

46
00:02:49,810 --> 00:02:54,770
sai phụ thuộc vào một mục có nằm
trong danh sách đưa ra hay không.

47
00:02:54,770 --> 00:02:58,570
Chúng ta sẽ đi vào các phép toán và các chuỗi đặc biệt

48
00:02:58,570 --> 00:03:02,020
trong tuần tới khi chúng ta nhìn vào
một kĩ thuật được gọi là broadcasting.

49
00:03:03,380 --> 00:03:08,090
Có lẽ phép tính thú vị nhất bạn
có thể làm với danh sách là cắt.

50
00:03:08,090 --> 00:03:11,920
Cú pháp xóa dấu ngoặc vuông để
truy cập một phần tử có thể thấy

51
00:03:11,920 --> 00:03:15,200
khá tương tự với cái bạn đã thấy
trong các ngôn ngữ khác.

52
00:03:15,200 --> 00:03:20,070
Trong python toán tử chỉ số
cho phép bạn truy cập nhiều giá trị.

53
00:03:20,070 --> 00:03:22,405
Tham số đầu tiên là vị trí bắt đầu,

54
00:03:22,405 --> 00:03:26,315
nếu đó là phần tử duy nhất thì
một phần tử sẽ được trả lại từ danh sách.

55
00:03:26,315 --> 00:03:29,015
Tham số thứ hai là phần cuối của phép cắt.

56
00:03:29,015 --> 00:03:33,815
Nó là kết thúc nếu bạn
cắt tham số đầu tiên là 0

57
00:03:33,815 --> 00:03:36,795
tham số tiếp theo là 1, thì bạn chỉ nhận lại một phần tử.

58
00:03:37,940 --> 00:03:40,580
Điều này dễ giải thích hơn nhiều bằng một ví dụ.

59
00:03:40,580 --> 00:03:44,100
Một mặt tiện ích của python
là tất cả các chuỗi thực sự là

60
00:03:44,100 --> 00:03:48,770
các danh sách của các ký tự vì thế
việc cắt thực hiện dễ dàng trên chúng.

61
00:03:48,770 --> 00:03:49,960
Đây là một ví dụ.

62
00:03:49,960 --> 00:03:57,320
Khi chúng ta chạy x sub 0 hoặc x sub 0:1, chúng ta
nhận được ký tự đầu tiên của chuỗi.

63
00:03:57,320 --> 00:04:02,240
Nhưng khi chúng ta chạy x sub 0:2, chúng ta
nhận được hai ký tự đầu tiên của chuỗi.

64
00:04:03,350 --> 00:04:07,210
Các giá trị chỉ số của chúng ta có thể là âm.

65
00:04:07,210 --> 00:04:10,465
Và điều này có nghĩa là để chỉ ra phần sau của chuỗi.

66
00:04:10,465 --> 00:04:16,799
x[-1] là chữ cuối cùng của chuỗi, và x[-4:-2]

67
00:04:16,799 --> 00:04:21,815
đọc trong tất cả các ký tự từ vị trí cuối cùng
thứ 4 đến vị trí cuối cùng thứ 2.

68
00:04:22,885 --> 00:04:25,245
Cuối cùng nếu chúng ta muốn
tham chiếu sự bắt đầu hoặc

69
00:04:25,245 --> 00:04:29,910
kết thúc của chuỗi một cách ngầm định,
chúng ta có thể bỏ các tham số trống.

70
00:04:29,910 --> 00:04:35,584
x[:3] bắt đầu với ký tự đầu tiên cho tới vị trí thứ ba.

71
00:04:35,584 --> 00:04:40,502
Và x[3:] bắt đầu với ký tự thứ tư
bởi vì chỉ số luôn bắt đầu với

72
00:04:40,502 --> 00:04:43,050
0 và đi tới cuối danh sách.

73
00:04:44,290 --> 00:04:46,910
Cắt là cốt lỗi của ngôn ngữ python và

74
00:04:46,910 --> 00:04:50,330
là một phần lớn của tính toán khoa học với python.

75
00:04:50,330 --> 00:04:53,480
Đặc biệt nếu bạn bắt đầu
thao tác với ma trận.

76
00:04:53,480 --> 00:04:56,370
Chúng ta sẽ nói về việc cắt
trong bài học tiếp theo.

77
00:04:56,370 --> 00:04:58,345
Nhưng đây là một câu hỏi
để giúp bạn bắt đầu.

78
00:05:00,499 --> 00:05:04,940
Bây giờ tôi đặt sang một bên
để nói về thao tác chuỗi.

79
00:05:04,940 --> 00:05:07,450
Cắt không phải cách duy nhất
để thao tác chuỗi.

80
00:05:07,450 --> 00:05:10,990
Và hoạt động phổ biến là để
tách chuỗi dựa trên các chuỗi con.

81
00:05:10,990 --> 00:05:13,360
Đó là đi qua các chuỗi tìm kiếm mẫu,

82
00:05:13,360 --> 00:05:15,880
và cắt từng đoạn cho thích hợp.

83
00:05:15,880 --> 00:05:18,330
Điều này được gọi là đánh giá thông thường và

84
00:05:18,330 --> 00:05:22,170
chúng ta sẽ tìm hiểu điều này chi tiết
trong phần đầu của chuỗi với

85
00:05:22,170 --> 00:05:25,860
văn bản khai thác bởi vì nó
là một phép toán phổ biến.

86
00:05:25,860 --> 00:05:28,387
Nhưng python có một số các công cụ
cơ bản cho phân tích văn bản.

87
00:05:28,387 --> 00:05:29,800
Và tôi sẽ cho bạn thấy chúng ở đây.

88
00:05:31,490 --> 00:05:34,800
Như chúng ta thấy các chuỗi là
các danh sách ký tự.

89
00:05:34,800 --> 00:05:38,800
Vì thế các phép toán bạn có thể làm trên
một danh sách, bạn có thể làm trên một chuỗi.

90
00:05:38,800 --> 00:05:43,260
Điều này có nghĩa là bạn có thể nối hai chuỗi
với nhau sử dụng toán tử plus.

91
00:05:43,260 --> 00:05:46,730
Và nhân chuỗi sẽ lặp lại một chuỗi cho trước.

92
00:05:46,730 --> 00:05:50,080
Bạn cũng có thể tìm kiếm chuỗi
sử dụng toán tử in.

93
00:05:51,380 --> 00:05:54,047
Kiểu chuỗi có một hàm
liên quan gọi là phân chia.

94
00:05:55,240 --> 00:06:00,530
Hàm này chia chuỗi thành các
chuỗi nhỏ dựa trên mẫu đơn giản.

95
00:06:00,530 --> 00:06:01,810
Đây là ví dụ,

96
00:06:01,810 --> 00:06:06,030
tôi sẽ chỉ chia tên đầy đủ của tôi theo ký tự cách.

97
00:06:06,030 --> 00:06:08,420
Kết quả là một danh sách của bốn phần tử.

98
00:06:08,420 --> 00:06:12,510
Chúng ta có thể lựa chọn phần tử đầu tiên với
phép toán chỉ số là tên đầu tiên,

99
00:06:12,510 --> 00:06:14,060
và phần tử cuối là tên cuối của tôi.

100
00:06:15,890 --> 00:06:18,570
Chúng ta sẽ sử dụng trên các chuỗi nhiều
một chút ngoại trừ trước khi chúng ta thực hiện,

101
00:06:18,570 --> 00:06:20,234
tôi muốn nói về các từ điển.

102
00:06:20,234 --> 00:06:23,923
Các từ điển tương tự như danh sách và
bộ dữ liệu trong đó chúng nắm giữ một tập

103
00:06:23,923 --> 00:06:28,110
các phần tử nhưng chúng là các bộ sưu tập
được dán nhãn cái mà không có trình tự.

104
00:06:28,110 --> 00:06:31,430
Điều này có nghĩa là với mỗi giá trị
bạn thêm vào trong từ điển,

105
00:06:31,430 --> 00:06:34,490
bạn phải đưa ra một
chìa khóa để lấy giá trị đó.

106
00:06:34,490 --> 00:06:37,130
Trong các ngôn ngữ khác cấu trúc
thường được gọi là bản đồ.

107
00:06:37,130 --> 00:06:40,940
Và trong python chúng ta sử dụng các
dấu ngoặc nhọn để biểu thị một từ điển.

108
00:06:40,940 --> 00:06:44,710
Đây là một ví dụ nơi chúng ta có
các tên liên kết với địa chỉ email.

109
00:06:44,710 --> 00:06:48,580
Bạn có thể thấy rằng chúng ta chỉ ra
mỗi phần tử của từ điển khi tạo ra nó

110
00:06:48,580 --> 00:06:51,485
sử dụng cặp giá trị được
chia ra bởi dấu hai chấm.

111
00:06:51,485 --> 00:06:55,520
Sau đó bạn có thể lấy lại một giá trị cho
một nhãn cho trước sử dụng toán tử chỉ số.

112
00:06:56,820 --> 00:07:00,349
Các kiểu bạn sử dụng cho các chỉ số hoặc
các giá trị trong từ điển có thể là bất kì cái gì.

113
00:07:00,349 --> 00:07:02,870
Và điều này có thể là sự kết hợp
của các kiểu nếu bạn thích.

114
00:07:03,880 --> 00:07:07,700
Chúng ta có thể thêm các phần tử mới vào
từ điển sử dụng cùng một toán tử chỉ số

115
00:07:07,700 --> 00:07:08,910
chúng ta đã từng sử dụng.

116
00:07:08,910 --> 00:07:10,640
Chỉ cần ở bên trái của câu lệnh.

117
00:07:11,800 --> 00:07:16,420
Bạn lặp lại tất cả các phần tử trong
từ điển theo một số cách.

118
00:07:16,420 --> 00:07:18,910
Đầu tiên bạn có thể lặp qua
tất cả các khóa và

119
00:07:18,910 --> 00:07:20,810
chỉ cần lấy ra nội dung
khi bạn thấy thích hợp.

120
00:07:21,850 --> 00:07:25,190
Hoặc bạn có thể lặp qua các
giá trị và bỏ các khóa.

121
00:07:26,840 --> 00:07:29,530
Cuối cùng bạn có thể lặp qua cả giá trị và

122
00:07:29,530 --> 00:07:31,950
khóa cùng lúc sử dụng hàm của phần tử.

123
00:07:33,550 --> 00:07:35,930
Ví dụ cuối cùng này có
một chút khác biệt và

124
00:07:35,930 --> 00:07:38,760
nó là một ví dụ về cái gì đó
được gọi là giải nén.

125
00:07:38,760 --> 00:07:42,470
Trong python bạn có thể có trình tự, đó
là danh sách hoặc bộ dữ liệu của các giá trị và

126
00:07:42,470 --> 00:07:47,010
bạn có thể giải nén các mục trong các
biến khác nhau qua các nhiệm vụ trong

127
00:07:47,010 --> 00:07:48,480
một câu lệnh.

128
00:07:48,480 --> 00:07:51,830
Đây là một ví dụ nữa về điều đó, nơi mà
chúng ta có một bộ dữ liệu có tên đầu của tôi,

129
00:07:51,830 --> 00:07:53,840
tên cuối của tôi và địa chỉ email của tôi.

130
00:07:53,840 --> 00:07:56,960
Tôi khai báo ba biến và gán chúng vào bộ dữ liệu.

131
00:07:56,960 --> 00:07:59,330
Bên dưới, python đã giải nén bộ dữ liệu và

132
00:07:59,330 --> 00:08:02,000
gán mỗi biến theo trình tự.

133
00:08:02,000 --> 00:08:04,470
Chúng ta có thể thấy điều đó nếu
chúng ta thêm phần tử thứ tư vào bộ dữ liệu,

134
00:08:04,470 --> 00:08:07,280
Python không chắc giải nén như thế nào,
vì thế chúng ta có một lỗi.

135
00:08:08,660 --> 00:08:11,020
Đó là tổng quan về việc xây dựng
trong các kiểu với python.

136
00:08:12,060 --> 00:08:15,390
Trong bài giảng tiếp theo chúng ta
sẽ nói lại về các chuỗi một cách ngắn gọn.

137
00:08:15,390 --> 00:08:16,980
sau đó bắt đầu làm việc với các tập dữ liệu.