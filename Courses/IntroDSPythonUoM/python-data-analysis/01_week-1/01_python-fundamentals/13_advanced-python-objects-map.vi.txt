Đến thời điểm này chúng ta không nói
nhiều về hướng đối tượng python. Trong khi các chức năng đóng vai trò lớn
trong hệ sinh thái python, python có các lớp mà có thể kèm theo các phương pháp
và được khởi tạo là các đối tượng. Bây giờ trong khóa học này không phải các
chi tiết thực chất của đối tượng trong python, hoặc lập trình hướng đối tượng. Và thực sự trong khi bạn sử dụng
các đối tượng trong python, bạn ít có khả năng tạo ta
các lớp mới khi bạn sử dụng môi trường tương tác bởi vì
nó hơi phức tạp một chút. Nhưng tôi nghĩ nó rất quan trọng để đi qua
một vài chi tiết của các đối tượng trong python, vì thế bạn không ngạc nhiên khi bạn thấy chúng. Đầu tiên bạn có thể xác định một lớp sử dụng
một từ khóa lớp và kết thúc bằng một dấu hai chấm. Bất kì cái gì lùi vào phía dưới là
trong phạm vi của lớp. Các lớp trong python được đặt tên sử dụng camel case, có nghĩa là chữ đầu tiên của
mỗi từ được viết hoa. Bạn không đưa khai báo các biến bên trong đối tượng,
bạn chỉ muốn bắt đầu sử dụng chúng. Các biến cũng có thể được khai báo. Chúng chỉ là các biến được chia sẻ
trên tất cả các instances. Vì thế trong ví dụ này chúng ta
đang mặc định cho tất cả mọi người ở trường thông tin. Nó không có ích ở đây nhưng tôi
muốn hiển thị đầy đủ. Để xác định một phương pháp bạn
chỉ cần viết nó như bạn có một hàm. Một thay đổi để có quyền truy cập
vào instance đó thì phương pháp được kích hoạt, bạn phải tự bao gồm
trong chữ ký của phương pháp. Tương tự nếu bạn muốn đề cập đến
các biến đặt trong đối tượng, bạn thêm từ selt ở đầu mỗi từ, với một dấu chấm. Trong định nghĩa này, ví dụ chúng ta
viết hai phương pháp. Đặt tên và đặt vị trí. Và cả hai trường hợp thay đổi biến
gọi là tên và vị trí tương ứng. Khi chúng ta chạy phần này,
chúng ta không thấy đầu ra. Lớp tồn tại nhưng chúng ta không
tạo ra bất kì đối tượng nào. Chúng ta có thể tạo đối tượng cho lớp này
bằng cách lấy tên lớp với dấu ngoặc đơn đằng sau nó. Sau đó chúng ta có thể lấy các chức năng và
xuất ra các thuộc tính của lớp sử dụng dấu chấm, phổ biến trong hầu hết các ngôn ngữ. Có hai ứng dụng của lập trình hướng
đối tượng trong python, bạn sẽ rút ra được từ ví dụ rất ngắn gọn này. Đầu tiên các đối tượng trong python
không có thành viên private hoặc protected. Nếu bạn tạo một đối tượng, bạn có đầy đủ quyền truy cập vào các phương pháp
hoặc các thuộc tính của đối tượng đó. Thứ hai không cần thiết cho một cấu trúc rõ ràng khi tạo ra
các đối tượng trong python. Bạn có thể thêm hàm constructor nếu
bạn muốn bằng cách khai báo hàm hai dấu gạch dưới init hai dấu gạch dưới. Bây giờ tôi sẽ không đi sâu vào các
đối tượng python nữa bởi vì có rất nhiều thứ hầu hết đối tượng định hướng tính năng của python không thực sự nổi bật cho
sự giới thiệu với khoa học dữ liệu. Nếu bạn quan tâm nhiều hơn tôi khuyên bạn xem tài liệu
python từ hướng dẫn python. Nó tổng quan về các tính năng
đối tượng của ngôn ngữ và có sự tham chiếu trong các nguồn. Hàm ánh xạ là một trong lập trình
chức năng cơ bản của python. Lập trình chức năng là một mô hình
lập trình bạn khai báo rõ ràng tất cả các thông số có thể thay đổi qua
sự thực hiện của hàm đã cho trước. Như vậy lập trình chức năng
được hiểu ra là miễn phí tác dụng phụ bởi vì có một hợp đồng phần mềm mô tả cái mà
có thể thay đổi bằng cách gọi một hàm. Bây giờ python không phải là một
ngôn ngữ lập trình chức năng. Bởi vì bạn có thể có nhiều tác dụng phụ của
các hàm và chắc chắn bạn không phải vượt qua các thông số mà bạn
quan tâm đến việc thay đổi. Nhưng lập trình chức năng tạo ra suy nghĩ nhiều hơn trong khi xâu chuỗi các hoạt động với nhau. Và điều này là một loại chủ đề trong
rất nhiều khoa học dữ liệu và cụ thể là làm sạch dữ liệu. Vì thế các phương pháp lập trình chức năng
thường được sử dụng trong python, và nó phổ biến để thấy một thông số
cho một hàm, là hàm của chính nó. Hàm ánh xạ có sẵn là một ví dụ của tính năng lập trình chức năng của python, tôi nghĩ các khía cạnh của
ngôn ngữ liên quan đến nhau. Kí hiệu hàm ánh xạ trông giống như thế này. Các thông số đầu tiên của hàm bạn
muốn được thực hiện và thông số thứ hai, và các thông số tiếp theo là
cái mà có thể được lặp. Tất cả các đối số lặp lại được
giải nén cùng nhau và đưa vào hàm đã cho trước. Hơi khó hiểu một chút,
hãy nhìn vào ví dụ. Giả sử chúng ta có hai danh sách các số, có thể là giá cả từ hai cửa hàng
khác nhau trên cùng một mặt hàng. Và chúng ta muốn tìm giá
tối thiểu chúng ta phải trả nếu chúng ta mua mặt hàng
rẻ hơn giữa hai cửa hàng. Để làm điều này chúng ta có thể lặp
qua mỗi danh sách, so sánh các mặt hàng và lựa chọn cái rẻ nhất. Với bản đồ chúng ta có thể làm sự
so sánh này trong một câu lệnh đơn. Nhưng khi chúng ta xuất ra ánh xạ, chúng ta
thấy rằng chúng ta có một giá trị tham khảo lẻ thay vì một danh sách các mặt hàng
chúng ta mong muốn. Điều này được gọi là đánh giá thông thường. Trong python hàm ánh xạ trả lại
cho bạn một đối tượng ánh xạ. Nó không thực sự thử và chạy hàm giữa hai phần tử, cho tới khi bạn nhìn vào bên trong một giá trị. Điều này là một mẫu thiết kế thú vị của ngôn ngữ và nó được sử dụng phổ biến khi xử lí dữ liệu lớn. Điều này cho phép chúng ta có
sự quản lí bộ nhớ hiệu quả, mặc dù đôi khi có thể là phức tạp trong tính toán. Ánh xạ lặp lại giống như danh sách và bộ dữ liệu,
vì thế chúng ta sử dụng cho vòng lặp để thấy tất cả các giá trị trong ánh xạ. Điều này thông qua các hàm và
cấu trúc dữ liệu cái mà chúng sẽ được áp dụng, là một dấu hiệu của lập trình chức năng. Nó rất phổ biến trong phân tích và làm sạch dữ liệu. Đây là vấn đề cho bạn để thử, nó
đem đến một số các nhiệm vụ bạn có thể mong đợi để thực hiện
với việc làm sạch dữ liệu.