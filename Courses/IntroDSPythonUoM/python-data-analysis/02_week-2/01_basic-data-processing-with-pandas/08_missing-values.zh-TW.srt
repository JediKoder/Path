1
00:00:08,720 --> 00:00:12,660
我們將在本週的講課中很快的討論一下缺失的數據。

2
00:00:12,660 --> 00:00:16,685
我們已經預先看到了Pandas如何處理缺失值，使用None類型和

3
00:00:16,685 --> 00:00:18,820
在NumPy使用NaN。

4
00:00:18,820 --> 00:00:21,800
缺失值在數據清理活動中很常見。

5
00:00:21,800 --> 00:00:24,480
我們應該討論幾個注意事項和討論要點。

6
00:00:25,480 --> 00:00:28,960
第一，在內置的載入函數，從帶分隔符號的文件，有提供控制

7
00:00:28,960 --> 00:00:30,840
缺失值的幾種方法。

8
00:00:30,840 --> 00:00:34,380
這些中最有密切關係的是na_values選項名單，

9
00:00:34,380 --> 00:00:38,590
來指示可能引用缺失值的一些字串。

10
00:00:38,590 --> 00:00:41,580
例如，我的一些社會學家同事經常

11
00:00:41,580 --> 00:00:46,120
使用99在二進制類中來表示那裡沒有數值。

12
00:00:46,120 --> 00:00:47,950
所以這很方便。

13
00:00:47,950 --> 00:00:52,530
您也可以使用na_filter選項來關閉空白過濾，

14
00:00:52,530 --> 00:00:55,480
如果實際上空白對你是有用的。

15
00:00:55,480 --> 00:00:58,101
但實際上這是相當少見的。

16
00:00:58,101 --> 00:01:01,759
除了控制如何加載缺失值的規則之外，

17
00:01:01,759 --> 00:01:06,230
有時候有必要將缺少值視為具有實際信息。

18
00:01:06,230 --> 00:01:08,730
我從我自己的研究中給一個例子。

19
00:01:08,730 --> 00:01:11,730
我經常處理從網上學習系統的記錄。

20
00:01:11,730 --> 00:01:12,400
尤其是尤其是

21
00:01:12,400 --> 00:01:17,390
我已經完成了幾個專案，有關課程採集系統中的影片使用。

22
00:01:17,390 --> 00:01:21,590
在這些系統中，播放器具常常有心跳(規律傳送訊號)功能，

23
00:01:21,590 --> 00:01:25,450
將播放統計資訊經常發送到服務器，也許每隔30秒。

24
00:01:26,530 --> 00:01:29,950
這些活動資料可以變大，因為他們可以承載播放系統的整個狀態，

25
00:01:29,950 --> 00:01:34,270
例如影片播放頭在哪裡，影片大小，

26
00:01:34,270 --> 00:01:37,420
哪個影片被呈現到螢幕，音量是多大的等等。

27
00:01:38,880 --> 00:01:41,300
如果我們載入數據文件log.txt，

28
00:01:41,300 --> 00:01:44,070
我們可以看到一個這樣的例子。

29
00:01:44,070 --> 00:01:48,520
在這個數據中，第一列是Unix紀元格式的時間戳。

30
00:01:48,520 --> 00:01:51,900
下一列是用戶名，後跟他們正在訪問的網頁和

31
00:01:51,900 --> 00:01:52,940
他們正在播放的影片。

32
00:01:54,190 --> 00:01:56,710
DataFrame的每一行都有播放位置。

33
00:01:56,710 --> 00:01:59,960
我們可以看到，隨著播放位置增加1，

34
00:01:59,960 --> 00:02:02,210
時間戳增加約30秒。

35
00:02:03,300 --> 00:02:04,820
除了用戶Bob。

36
00:02:04,820 --> 00:02:07,060
原來，Bob已經暫停播放，

37
00:02:07,060 --> 00:02:10,530
隨著時間的推移，播放位置不會改變。

38
00:02:10,530 --> 00:02:14,960
注意，我們嘗試從數據中獲取這些知識是多麼困難，

39
00:02:14,960 --> 00:02:18,470
因為它沒有按時間戳排序，如你可能期望的。

40
00:02:18,470 --> 00:02:22,240
這在種具有高度並行性的系統上實際上並不罕見。

41
00:02:24,000 --> 00:02:27,420
在paused和volume列中缺少值很多。

42
00:02:27,420 --> 00:02:30,380
通過網絡發送此信息效率不高，如果

43
00:02:30,380 --> 00:02:31,320
沒有更改。

44
00:02:31,320 --> 00:02:34,740
因此，這個特定的系統只是將null值插入數據庫，

45
00:02:34,740 --> 00:02:35,479
如果沒有任何更改。

46
00:02:36,590 --> 00:02:38,850
Pandas的一個方便的功能

47
00:02:38,850 --> 00:02:43,230
來處理缺失值是填充功能，fillna。

48
00:02:43,230 --> 00:02:45,780
此函數需要一些參數，

49
00:02:45,780 --> 00:02:49,210
例如，您可以傳入一個稱為標量值的單一值，

50
00:02:49,210 --> 00:02:51,650
將所有缺少的數據更改為一個固定值。

51
00:02:51,650 --> 00:02:55,470
這在這種情況下並不真正適用，但它是一個很常見的用例。

52
00:02:55,470 --> 00:02:57,720
接下來是方法參數。

53
00:02:57,720 --> 00:03:00,780
兩個常用的填充值是ffill和bfill。

54
00:03:00,780 --> 00:03:04,490
ffill是向前填補,它更新na值

55
00:03:04,490 --> 00:03:07,650
特定單元格在使用上一行的值。

56
00:03:07,650 --> 00:03:10,770
重要的是要注意，您的數據需要有排序，

57
00:03:10,770 --> 00:03:13,250
以使其具有您可能需要的效果。

58
00:03:13,250 --> 00:03:17,210
來自傳統資料庫管理系統的數據通常沒有

59
00:03:17,210 --> 00:03:19,630
排序保證，就像這個數據一樣。

60
00:03:19,630 --> 00:03:20,300
所以要小心。

61
00:03:21,810 --> 00:03:25,360
在Pandas我們可以按索引或值排序。

62
00:03:25,360 --> 00:03:28,780
在這裡，我們只是將時間戳記提升成索引，然後對索引進行排序。

63
00:03:30,080 --> 00:03:33,140
如果我們仔細觀察輸出，但我們會注意到索引

64
00:03:33,140 --> 00:03:34,560
不是真的唯一

65
00:03:34,560 --> 00:03:37,830
兩個用戶似乎能夠同時使用該系統。

66
00:03:37,830 --> 00:03:39,620
再次，一個很常見的情況。

67
00:03:40,770 --> 00:03:44,380
讓我們重新設置索引，然後使用一些多層次索引，

68
00:03:44,380 --> 00:03:48,200
並將用戶名提升到第二層次索引來處理該問題。

69
00:03:49,520 --> 00:03:50,918
現在我們已經對數據進行了索引和

70
00:03:50,918 --> 00:03:55,550
排序，我們可以使用ffill來填寫缺少的數據。

71
00:03:55,550 --> 00:03:57,800
最好記住，在處理缺失值時，

72
00:03:57,800 --> 00:03:59,570
你可以處理單個列或

73
00:03:59,570 --> 00:04:02,860
一組的列通過投射它們，按照我們前面提到的方式。

74
00:04:02,860 --> 00:04:05,920
所以你不必在一個指令中修復所有缺少值。

75
00:04:06,940 --> 00:04:10,520
有時使用正向填充是有用的，有時是向後填充，

76
00:04:10,520 --> 00:04:12,686
有時有用的只用單個數字。

77
00:04:12,686 --> 00:04:16,900
最近，Pandas團隊介紹了一種填充缺失值的方法，

78
00:04:16,900 --> 00:04:19,960
用列表，它的長度與DataFrame相同。

79
00:04:19,960 --> 00:04:22,730
這使得很容易導出缺失的值，如果您

80
00:04:22,730 --> 00:04:24,160
有這樣做的基礎。

81
00:04:24,160 --> 00:04:26,880
例如，如果您處理收據，有

82
00:04:26,880 --> 00:04:30,770
最終價格的列和折扣的列，但是缺少資訊在原始

83
00:04:30,770 --> 00:04:34,104
價格的列，您可以使用fillna自動填充。

84
00:04:35,650 --> 00:04:37,510
關於缺失值的最後一個註釋。

85
00:04:37,510 --> 00:04:39,760
當您在DataFrames上使用統計功能時，

86
00:04:39,760 --> 00:04:42,670
這些函數通常會忽略缺失值。

87
00:04:42,670 --> 00:04:45,740
例如，如果您嘗試計算DataFrame的平均值，

88
00:04:45,740 --> 00:04:49,360
則底層NumPy函數將忽略缺失值。

89
00:04:49,360 --> 00:04:50,940
這通常是你想要的，

90
00:04:50,940 --> 00:04:53,360
但你應該知道那些值被排除在外。