DataFrame數據結構是Pandas的核心。 這將是你的主要對象，在處理數據分析 和數據清理任務的時候。 DataFrame在概念上是一個二維列表(series)對象， 其中有一個索引(index)和多列內容，每列(column)都有一個標籤(label)。 事實上，列(column)和行(row)之間的區別 實際上只是一個概念上的區別。 你可以將DataFrame本身視為簡單的雙軸有標籤的陣列。 你可以以許多不同的方式創建一個DataFrame， 其中一些你可能想像的到。 例如，你可以使用一組列表(series)， 其中每個列表代表一行數據。 或者你可以使用一組字典(dictionary)， 其中每個字典都代表一行數據。 我們來看一個例子。 我將創建三個採購訂單記錄作為列表對象。 在一個虛構的商店。 每個列表都有一個客戶名稱， 描述要購買的商品的字串(string)，以及商品的費用。 我喜歡狗，所以我會買一堆狗食。 凱文·柯林斯·湯普森，系列中，第三個課程的講師 他似乎更像是對我來說，喜歡貓的人，所以我會讓他購買一些貓咪的沙子。 我認為維諾德，教本系列的第四個課程， 更是一個喜歡鳥的人，所以我會在那裡添加一些鳥吃的種子。 然後，我們將它們作為第一個參數提供給DataFrame， 並設置索引值(index)，代表每個購買的商店。 你會看到，當我們打印出一個DataFrame時，Jupyter筆記本試圖 將其漂亮一些，並將其作為表格列印出來，這是很好的。 與列表(series)類似，我們可以使用iloc和loc屬性提取數據。 因為DataFrame是二維的，所以將單一值傳遞給loc 索引操作將返回一個列表，如果只有一行返回。 在這個例子中，如果我們想要選擇與Store2關聯的數據， 那麼我們只用一個參數查詢loc屬性(attribute)。 你將注意到，列表的名稱作為行索引值返回， 而列名(column_name)也包括在輸出中。 我們可以使用python類型(type)函數檢查返回的數據類型。 重要的是要記住，索引(index)和 列(row)名稱，沿著任何一軸，水平或垂直方向的，可能不必是唯一的。 例如，在這個例子中，我們看到兩個採購記錄 在Store1是不同的行。 如果我們用單一值在DataFrame的loc屬性，多行 的DataFrame將返回，不是新的列表，而是新的DataFrame。 例如，如果我們查詢Store1記錄， 我們會看到Chris和Kevin都在同一個寵物用品商店購物。 Pandas的DataFrame的一個功能，就是可以快速的選擇數據 在多重軸上 例如，如果你只想列出Store1的費用，你將提供 兩個參數給.loc，一個為行(row)索引，另一個為列名(column)。 如果我們只對Store 1的費用感興趣，我們可以把它寫成 df.loc['Store 1', 'Cost'] 如果我們只想做列(row)選擇， 並且只取所有費用的清單怎麼辦？ 那麼有幾個選擇。 首先，你可以首先獲取DataFrame的轉置使用大寫T屬性 ，該屬性將交換所有列和行。 這本質上將你的列名稱變成索引(index)。 然後我們可以使用.loc方法。 這是有用的，但它很醜陋。 由於iloc和loc用於行(row)的選擇，Pandas的開發人員 直接在DataFrame上保留索引操作列(column)的選擇。 在Pandas的DataFrame中，列(column)總是有一個名字。 所以這個選擇始終是基於標籤(label)的，而不是像 在列表(series)對像上使用方括號運算符一樣混亂。 對於那些熟悉關聯資料庫的人來說， 這個操作類似於列(column)的投影。 最後，由於使用索引(indexing)運算的結果 是DataFrame或者series，所以可以將運算鏈接在一起。 例如，我們可以將所有Store 1費用的查詢 所有 "Store 1" 的成本是 df.loc('Store 1', 'Cost') 這看起來相當合理，獲取我們我們想要的結果。 但鏈接可能會帶來一些代價， 最好避免，如果可以使用其他方法。 特別是，鏈接往往導致 Pandas 返回DataFrame的副本 而不是DataFrame的視圖。 對於選擇數據， 這沒什麼大不了的，儘管它可能比必要的慢一點。 如果你正在更改數據，這是一個重要的區別， 可能是錯誤的根源。 這裡是另一種方法。 我們看到，.loc執行row的選擇，它可以使用兩個參數， row索引和column名稱列表。 .loc也支持分離切片。 如果我們想要選擇所有的row， 我們可以使用一個column，表明從頭到尾一個完整的切片。 然後添加column名稱字串，作為第二個參數。 實際上，如果我們要包含多幾行columns，我們可以用列表來這樣做。 Pandas只會顯示出我們要求的columns。 這裡有一個例子，我們要求 所有商店的名稱和費用，使用.loc運算符。 這就是從DataFrame中選擇和投影數據，根據row和 column標籤。 要記住的關鍵概念是行和列，真的只是為了 我們的方便使用。 在這裏面只是一個雙軸有標籤的陣列(array)，而且 轉置columns是很容易的。 另外，仔細考慮鏈接(chaining)的問題， 盡量避免，它可能會導致不可預知的結果。 你的意圖是獲取數據的視圖(view)， 而Pandas會返回給你一份副本。 在Pandas的世界裡，做朋友的不要讓朋友用鏈接。 所以如果你看到它，指出來，並且分享一個較不模糊的解決方案。 現在，在我們離開討論存取DataFrames中的數據之前， 我們來談談刪除數據。 很容易刪除series和DataFrames的數據， 我們可以使用drop函數來這樣做。 此函數需要單一參數，即索引(index)或row標籤。 這是Pandas新使用者另一個棘手的地方。 正規的情況下，drop函數不會更改DataFrame。 相反，返回給你刪除了指定行的DataFrame的副本。 我們可以看到，我們原來的DataFrame還是完好無損的。 讓我們用copy方法複製一份，然後再用drop函數在這副本。 在Pandas中，這是一個非常典型的模式，對DataFrame進行就地更改， 只有在需要的時候才能做，通常是在涉及index的變更上。 所以重要的是要注意到。 Drop有兩個有趣的可選擇的參數。 第一個是inplace，如果設置為true， 則DataFrame將被就地更新，而不是返回副本。 第二個參數是axis，表示要刪除的。 正規的情況下，該值為0，表示row的軸向。 但是，如果要刪除column，則可以將其更改為1。 然而，有第二種方法去刪除column。 直接使用索引操作，使用del關鍵字。 但是，丟棄數據的方法 立即對DataFrame生效，並且不返回視圖。 最後，向DataFrame添加一個新column 與將其指定某些值一樣簡單。 比如說， 如果我們想要添加一個新的位置作為column，預設值為none， 我們可以在方括弧之後，使用指派運算符來實現。 這將立即將預設值放送到新的column。