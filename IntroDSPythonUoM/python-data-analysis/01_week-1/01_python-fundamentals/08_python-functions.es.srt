1
00:00:08,706 --> 00:00:09,959
En el resto de este módulo,

2
00:00:09,959 --> 00:00:13,750
Voy a proporcionar una visión general muy
básica del lenguaje de programación de Python.

3
00:00:13,750 --> 00:00:15,890
Si tienes conocimientos
de programación,

4
00:00:15,890 --> 00:00:19,530
Este resumen será suficiente para
tener éxito en el resto del este curso...

5
00:00:19,530 --> 00:00:22,090
y los siguientes cursos
de la especialización.

6
00:00:22,090 --> 00:00:24,330
Si no tienes experiencia
en programación o

7
00:00:24,330 --> 00:00:28,180
sientes que el contenido es excesivamente desafiante,
entonces te animo a que te detengas y...

8
00:00:28,180 --> 00:00:30,750
tomes una clase de 
programación introductoria

9
00:00:30,750 --> 00:00:34,320
Un colega mío, el Dr. Chuck Severance,
ofrece una excelente especialización en

10
00:00:34,320 --> 00:00:36,760
Coursera, llamada
"Python para Todos".

11
00:00:36,760 --> 00:00:38,780
Puedes encontrar un enlace al
curso en la sección de recursos.

12
00:00:39,980 --> 00:00:44,240
El sistema Coursera permite ejecutar código
Python desde el navegador de dos maneras.

13
00:00:44,240 --> 00:00:47,390
Primero, podemos usar avisos incrustados
en video, donde surgirá una pregunta y

14
00:00:47,390 --> 00:00:50,030
puedes probar y resolver esa
pregunta desde el navegador.

15
00:00:50,030 --> 00:00:52,070
Esto es nuevo en la plataforma Coursera y

16
00:00:52,070 --> 00:00:54,840
vamos a probarlo en el
próximo par de lecciones.

17
00:00:54,840 --> 00:00:58,080
En segundo lugar, el sistema Coursera ha
sido integrado con los cuadernos Jupyter.

18
00:00:59,120 --> 00:01:02,370
Estos cuadernos te permiten
dividir tu código en celdas

19
00:01:02,370 --> 00:01:04,710
ejecutar dichas celdas
bajo demanda.

20
00:01:04,710 --> 00:01:07,640
Lo bueno de estos cuadernos es que
ofrecen un almacenamiento semi-permanente

21
00:01:07,640 --> 00:01:10,330
para tu aprendizaje y
puedes experimentar

22
00:01:10,330 --> 00:01:14,230
con la programación sin tener que 
instalar nada en tu computadora.

23
00:01:14,230 --> 00:01:17,300
Todas las asignaciones se realizarán en cuadernos
Júpyter, pero por supuesto que puedes

24
00:01:17,300 --> 00:01:21,390
descargar e instalar, Python, Jupyter, y todas
las librerías asociadas que se necesitan para

25
00:01:21,390 --> 00:01:24,300
seguir este curso desde tu 
propio ordenador si lo deseas.

26
00:01:24,300 --> 00:01:27,260
En el siguiente video, nuestro asistente
ofrecerá una visión general de este

27
00:01:27,260 --> 00:01:31,170
proceso instalando los cuadernos 
Jupyter de forma local para

28
00:01:31,170 --> 00:01:34,890
aquellos que estén interesados, y en esta clase 
voy a dar una visión general de cómo se pueden

29
00:01:34,890 --> 00:01:37,360
utilizar estos cuadernos en 
el ambiente de Coursera.

30
00:01:38,540 --> 00:01:41,470
Pero por ahora, veamos algunos
conceptos básicos de Python.

31
00:01:41,470 --> 00:01:45,040
Primero, Python es un lenguaje de alto nivel, 
lo que significa que está optimizado para

32
00:01:45,040 --> 00:01:46,830
ser leído por personas
más que por máquinas.

33
00:01:46,830 --> 00:01:51,210
También es un lenguaje interpretado, lo que
significa que no se compila directamente a

34
00:01:51,210 --> 00:01:56,680
código de máquina y lo más importante es que es
comúnmente utilizado de manera interactiva.

35
00:01:56,680 --> 00:01:59,750
Esto podría resultarte muy diferente si
estás acostumbrado a la programación en

36
00:01:59,750 --> 00:02:04,930
Java o C, donde escribes código,
compilas, ejecutas y ves la salida.

37
00:02:04,930 --> 00:02:08,680
En Python, puedes iniciar el intérprete 
interactivo y comenzar a escribir código,

38
00:02:08,680 --> 00:02:13,240
línea por línea, con el intérprete, evaluando
cada instrucción a medida que la escribes.

39
00:02:13,240 --> 00:02:15,090
Esto resulta
muy útil para

40
00:02:15,090 --> 00:02:20,100
tareas que requieren mucha investigación, 
frente a aquellas que requieren mucho diseño.

41
00:02:20,100 --> 00:02:22,320
"Shell scripting" es
un ejemplo de esto.

42
00:02:22,320 --> 00:02:24,415
Y la limpieza de datos 
es otro ejemplo.

43
00:02:24,415 --> 00:02:27,750
O puedes escribir scripts que ejecuten
programas como sueles hacer

44
00:02:27,750 --> 00:02:29,310
en otros lenguajes.

45
00:02:29,310 --> 00:02:32,030
A lo largo de esta especialización
usaremos Python

46
00:02:32,030 --> 00:02:33,429
de esta manera
interactiva

47
00:02:35,030 --> 00:02:39,260
Una sorpresa común para algunos programadores
que provienen de Java o C es que

48
00:02:39,260 --> 00:02:44,100
Python es un lenguaje con "tipo dinámico",
similar a lenguajes como JavaScript.

49
00:02:44,100 --> 00:02:46,120
Esto significa que cuando 
declaras una variable,

50
00:02:46,120 --> 00:02:49,390
puedes asignarla como un entero en una línea,
y como una cadena en la línea siguiente.

51
00:02:50,670 --> 00:02:52,450
Como no hay ningún
paso de compilación,

52
00:02:52,450 --> 00:02:54,910
No tienes a nadie que te
ayude a administrar los tipos.

53
00:02:54,910 --> 00:02:58,700
Necesitas comprobar la presencia de la
funcionalidad cuando vayas a usarla o

54
00:02:58,700 --> 00:03:02,530
Intentar usar la funcionalidad y
capturar los errores que se produzcan.

55
00:03:02,530 --> 00:03:05,970
El "tipo dinámico" es particularmente
agradable cuando se usa Python de

56
00:03:05,970 --> 00:03:09,200
de manera interactiva, ya
que permite configurar y

57
00:03:09,200 --> 00:03:13,460
modificar los contenidos de las variables sin
tener que preocuparse por la definición sintáctica

58
00:03:13,460 --> 00:03:14,559
subyacente de la variable.

59
00:03:15,590 --> 00:03:18,030
Bien, saltemos a un ejemplo.

60
00:03:18,030 --> 00:03:21,250
Para todos los ejemplos de código que te
mostraré, encontrarás una versión anotada y

61
00:03:21,250 --> 00:03:24,970
con comentarios en un cuaderno
ubicado en la sección de recursos del curso.

62
00:03:24,970 --> 00:03:28,410
Te invito a seguirlo o, si prefieres,
a crear un nuevo cuaderno y

63
00:03:28,410 --> 00:03:30,060
escribir código activamente.

64
00:03:31,140 --> 00:03:33,710
Python requiere
escribir poco código.

65
00:03:33,710 --> 00:03:37,110
De hecho, si sólo quieres establecer el
valor de un par de variables, y la salida

66
00:03:37,110 --> 00:03:41,240
con el resultado de estas variables sumadas,
podrías hacerlo en tres líneas.

67
00:03:41,240 --> 00:03:43,570
En este ejemplo, voy a
escribir tres sentencias.

68
00:03:43,570 --> 00:03:48,380
Las dos primeras establecen las variables X e Y,
cada una con un valor entero...

69
00:03:48,380 --> 00:03:49,420
Luego hago la suma.

70
00:03:50,420 --> 00:03:53,710
Podemos ejecutar esta celda
pulsando MAYUSCULA + INTRO o

71
00:03:53,710 --> 00:03:57,000
Haciendo clic en el icono de reproducción
en la barra de herramientas.

72
00:03:57,000 --> 00:04:00,150
La salida de la sentencia 
se imprime inmediatamente.

73
00:04:00,150 --> 00:04:03,610
Si estuvieras usando Python en un modo
no interactivo, no se imprimiría nada.

74
00:04:03,610 --> 00:04:07,960
Pero como lo estamos usando en modo interactivo,
obtendremos el valor inmediatamente.

75
00:04:07,960 --> 00:04:11,740
Lo que está sucediendo por detrás es que
el browser está enviando su código Python

76
00:04:11,740 --> 00:04:13,550
a una máquina en la nube,

77
00:04:13,550 --> 00:04:18,100
que ejecuta el código en un intérprete
de Python y envía los resultados.

78
00:04:19,640 --> 00:04:24,880
Podemos ver que después de ejecutar una celda,
se crea una nueva celda vacía a continuación.

79
00:04:24,880 --> 00:04:28,200
Si sólo ponemos X y ejecutamos,
obtenemos el valor de 1.

80
00:04:28,200 --> 00:04:31,820
Por lo tanto, es importante saber que
el intérprete de Python mantiene el estado.

81
00:04:31,820 --> 00:04:34,560
Es decir que sus variables siguen
existiendo entre celdas.

82
00:04:35,710 --> 00:04:39,130
Más allá de eso, si volvemos y
cambiamos algo en una celda anterior,

83
00:04:39,130 --> 00:04:43,050
Tenemos que volver a ejecutar el script
para que tengan lugar los cambios.

84
00:04:43,050 --> 00:04:46,730
El "Reinicio y ejecutar todo" es una función
particularmente útil, ya que limpia

85
00:04:46,730 --> 00:04:50,670
el estado del intérprete y vuelve a ejecutar
todas las celdas del cuaderno actual.

86
00:04:51,760 --> 00:04:54,310
Te darás cuenta de que Python
no requiere el uso de

87
00:04:54,310 --> 00:04:57,330
palabras clave como VAR, TO, DECLARE 
o un nombre de variable o

88
00:04:57,330 --> 00:05:01,680
punto y coma al final de las líneas,
que se usan comúnmente en otros lenguajes.

89
00:05:01,680 --> 00:05:05,280
Python hace uso del espacio en blanco para
comprender el alcance de las funciones,

90
00:05:05,280 --> 00:05:08,700
bucles y marcadores de fin de línea
para comprender el final de las sentencias.

91
00:05:09,830 --> 00:05:13,680
Por supuesto, Python tiene estructuras de
software tradicionales como funciones.

92
00:05:13,680 --> 00:05:17,750
He aquí un ejemplo, en el que refactorizamos
el código anterior en una función.

93
00:05:17,750 --> 00:05:21,470
Verás que la sentencia DEF indica
que estamos escribiendo una función.

94
00:05:21,470 --> 00:05:24,320
Entonces cada línea que es parte de 
la función necesita ser sangrada

95
00:05:24,320 --> 00:05:26,440
con un carácter de tabulación
o un par de espacios.

96
00:05:27,510 --> 00:05:31,200
Una vez más, como estamos en un entorno
interactivo, cuando la sentencia es

97
00:05:31,200 --> 00:05:35,330
evaluada luego de presionar MAYUSCULA + INTRO, 
los resultados se imprimen inmediatamente abajo.

98
00:05:37,240 --> 00:05:39,110
Aquí está nuestra primera interacción.

99
00:05:39,110 --> 00:05:43,878
¿Por qué no intentas cambiar esta función para
aceptar tres parámetros en lugar de dos?

100
00:05:43,878 --> 00:05:46,175
Y que retorne la suma
de los tres valores?

101
00:05:49,048 --> 00:05:52,168
OK, las funciones son geniales, pero son un
poco diferente de lo que podrías encontrar en

102
00:05:52,168 --> 00:05:55,420
otros lenguajes y aquí van
algunas sutilezas involucradas.

103
00:05:55,420 --> 00:05:59,810
En primer lugar, como no hay tipificación, no
tienes que establecer el tipo de dato de retorno.

104
00:05:59,810 --> 00:06:02,930
En segundo lugar, no tienes que
poner una sentencia de retorno.

105
00:06:02,930 --> 00:06:06,030
Hay un valor especial llamado
"none" que se retorna.

106
00:06:06,030 --> 00:06:09,650
"None" es similar a null en Java y
representa la ausencia de valor.

107
00:06:10,730 --> 00:06:14,820
En tercer lugar, en Python, puedes tener
valores predeterminados para los parámetros.

108
00:06:14,820 --> 00:06:15,980
Pero la ciencia forense no es muy buena determinando Mens Rea, la intención.

109
00:06:15,980 --> 00:06:20,390
En este ejemplo, podemos reescribir la función
"add_numbers" para que tome tres parámetros,

110
00:06:20,390 --> 00:06:23,970
Pero podríamos configurar el último parámetro
para que sea "None" por defecto.

111
00:06:23,970 --> 00:06:28,220
Esto significa que puedes llamar a la
función con sólo dos valores o con tres, y

112
00:06:28,220 --> 00:06:31,100
No es necesario volver a escribir la
firma de la función para sobrecargarla.

113
00:06:32,290 --> 00:06:34,650
Esta es una implicación importante.

114
00:06:34,650 --> 00:06:38,580
Todos los parámetros opcionales, 
los que tienen valores por defecto

115
00:06:38,580 --> 00:06:42,030
necesitan ir al final de
la declaración de la función.

116
00:06:42,030 --> 00:06:46,100
También significa que puedes pasar
parámetros opcionales como valores etiquetados.

117
00:06:46,100 --> 00:06:48,600
He aquí un ejemplo de
un parámetro etiquetado.

118
00:06:48,600 --> 00:06:52,135
Podemos reescribir la función para
que haya dos parámetros opcionales.

119
00:06:52,135 --> 00:06:55,300
Si queremos llamar a la función
con sólo dos números pero

120
00:06:55,300 --> 00:06:58,690
establecer también el valor de la bandera,
tenemos que nombrar explícitamente y

121
00:06:58,690 --> 00:07:02,670
Establecer el valor de la bandera en
verdadero cuando invoca la función.

122
00:07:02,670 --> 00:07:05,650
Por ahora, también has visto el
uso de la sentencia de impresión.

123
00:07:05,650 --> 00:07:08,000
Entraremos en más detalle, pero

124
00:07:08,000 --> 00:07:11,950
PRINT tomará un item, intentará convertirlo
en una cadena y luego imprimirá la salida.

125
00:07:11,950 --> 00:07:14,910
No usamos esto mucho en el modo
interactivo del intérprete, pero

126
00:07:14,910 --> 00:07:18,110
Es útil cuando queremos imprimir
múltiples valores para una sola celda.

127
00:07:19,220 --> 00:07:22,840
Bueno, una última palabra sobre
las funciones básicas en Python.

128
00:07:22,840 --> 00:07:25,740
En Python, puedes asignar
una variable a una función.

129
00:07:25,740 --> 00:07:27,910
Esto puede parecer
completamente normal o

130
00:07:27,910 --> 00:07:31,410
completamente extraño dependiendo
de tu experiencia en programación.

131
00:07:31,410 --> 00:07:34,950
Al asignar una variable a una función, 
puedes pasar esa variable a

132
00:07:34,950 --> 00:07:38,830
otras funciones permitiendo una cierta
programación funcional básica.

133
00:07:38,830 --> 00:07:41,160
Hablaremos un poco de esto
más adelante en el curso.

134
00:07:41,160 --> 00:07:44,620
Pero he aquí un ejemplo donde 
definimos una función para sumar números,

135
00:07:44,620 --> 00:07:48,290
y entonces asignamos esa función a la variable "a",
y luego invocamos la variable.