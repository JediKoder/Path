1
00:00:08,907 --> 00:00:12,328
Bạn có thể thấy từ khóa lambda
xuất hiện trong nội dung tuần này và

2
00:00:12,328 --> 00:00:16,196
bạn chắc chắn sẽ thấy nó xuất hiện nhiều hơn
khi bạn dành nhiều thời gian hơn nữa với python và

3
00:00:16,196 --> 00:00:17,880
khoa học dữ liệu.

4
00:00:17,880 --> 00:00:21,770
Lambda là cách python
tạo ra các hàm vô danh.

5
00:00:21,770 --> 00:00:24,630
Giống như các hàm khác nhưng chúng không có tên.

6
00:00:24,630 --> 00:00:26,060
Mục đích là chúng rất đơn giản hoặc

7
00:00:26,060 --> 00:00:29,440
chu kỳ sống ngắn và dễ dàng để
viết ra hàm trong một dòng

8
00:00:29,440 --> 00:00:32,169
thay vì gặp khó khăn trong việc tạo một hàm có tên.

9
00:00:33,300 --> 00:00:35,460
Cú pháp lamdba khá là đơn giản.

10
00:00:35,460 --> 00:00:37,590
Nhưng nó có thể mất một
chút thời gian để quen.

11
00:00:38,610 --> 00:00:42,270
Bạn đưa ra một hàm lambda với
từ lambda theo sau là một danh sách

12
00:00:42,270 --> 00:00:47,610
các đối số, tiếp theo là dấu hai chấm và một
biểu thức và điều này rất quan trọng.

13
00:00:47,610 --> 00:00:50,596
Chỉ có một biểu thức được
đánh giá trong lambda.

14
00:00:50,596 --> 00:00:54,299
Giá trị của biểu thức được trả lại
vào khi thực hiện của lambda.

15
00:00:55,570 --> 00:00:58,520
Kết quả trả lại của lambda là một hàm tham chiếu.

16
00:00:58,520 --> 00:01:01,550
Vì thế trong trường hợp này
bạn sẽ thực hiện my_function và

17
00:01:01,550 --> 00:01:03,290
truyền vào ba thông số khác nhau.

18
00:01:04,290 --> 00:01:07,530
Lưu ý rằng bạn không thể mặc định
giá trị cho các thông số lambda và

19
00:01:07,530 --> 00:01:10,870
bạn không thể có logic phức tạp bên trong lambda

20
00:01:10,870 --> 00:01:12,950
bởi vì bạn bị giới hạn với một biểu thức đơn.

21
00:01:14,130 --> 00:01:18,420
Vì thế lambda bị giới hạn hơn nhiều
so với các khai báo hàm đầy đủ.

22
00:01:18,420 --> 00:01:22,360
Nhưng tôi nghĩ chúng rất hữu ích cho
các nhiệm vụ làm sạch dữ liệu.

23
00:01:22,360 --> 00:01:25,040
Và bạn sẽ thấy nhiều ví dụ với chúng trên web.

24
00:01:25,040 --> 00:01:27,530
Bạn sẽ có thể đọc và viết lamdba.

25
00:01:27,530 --> 00:01:28,510
Hãy thử ở đây.

26
00:01:30,800 --> 00:01:33,530
Chúng ta đã học nhiều về
các trình tự trong python.

27
00:01:33,530 --> 00:01:36,470
Các bộ dữ liệu, danh sách, từ điển và vân vân.

28
00:01:37,510 --> 00:01:40,580
Các trình tự là các cấu trúc mà
chúng ta có thể lặp và

29
00:01:40,580 --> 00:01:44,590
chúng ta thường tạo ra chúng qua các vòng lặp
hoặc bằng việc đọc dữ liệu từ tập tin.

30
00:01:45,850 --> 00:01:50,720
Python đã xây dựng để hỗ trợ cho việc tạo ra
các bộ sưu tập sử dụng cú pháp viết tắt

31
00:01:50,720 --> 00:01:53,140
gọi là list comprehensions.

32
00:01:54,230 --> 00:01:55,690
Đây là một ví dụ.

33
00:01:55,690 --> 00:01:58,380
Đầu tiên chúng ta viết một vòng lặp nhỏ.

34
00:01:58,380 --> 00:02:02,740
Ở đây tôi đang lặp giữa 0 và 1,000 và
sau đó kiểm tra với phép tính số dư

35
00:02:02,740 --> 00:02:07,230
để xem liệu số này chia cho hai được kết quả dư bao nhiêu.

36
00:02:07,230 --> 00:02:10,880
Nếu kết quả dư của việc chia cho hai
bằng không, thì tôi biết nó chia hết cho hai, nên

37
00:02:10,880 --> 00:02:13,530
chắc chắn đây là số chẵn và tôi sẽ thêm
nó vào danh sách của chúng ta.

38
00:02:15,450 --> 00:02:18,360
Chúng ta có thể viết lại điều này
như một list-comprehension bằng

39
00:02:18,360 --> 00:02:20,980
đặt vòng lặp này trên một dòng.

40
00:02:20,980 --> 00:02:24,300
Chúng ta bắt đầu list-comprehensive với giá trị
mà chúng ta muốn có trong danh sách.

41
00:02:24,300 --> 00:02:25,770
Trong trường hợp này nó là một số.

42
00:02:25,770 --> 00:02:31,030
Chúng ta đặt nó trong vòng lặp for và cuối cùng
chúng ta thêm các mệnh đề điều kiện bất kì.

43
00:02:31,030 --> 00:02:33,920
Bạn có thể thấy rằng điều này là một
định dạng nhỏ gọn hơn rất nhiều.

44
00:02:33,920 --> 00:02:35,690
Và nó có xu hướng nhanh hơn.

45
00:02:36,910 --> 00:02:40,890
Giống như với lambdas, list-comprehensions là một định dạng súc tích

46
00:02:40,890 --> 00:02:44,030
cái mà có thể cung cấp tính
dễ đọc và lợi ích hiệu suất và

47
00:02:44,030 --> 00:02:49,190
bạn sẽ thường thấy chúng được sử dụng trong các
hướng dẫn khoa học dữ liệu hoặc trong việc tràn ngăn xếp.

48
00:02:49,190 --> 00:02:53,170
Nhưng bạn không được yêu cầu sử dụng
chúng trong các bài tập trong khóa học này.

49
00:02:53,170 --> 00:02:56,702
Ở đây tại sao bạn không chuyển một
chức năng thành một list-comprehension.