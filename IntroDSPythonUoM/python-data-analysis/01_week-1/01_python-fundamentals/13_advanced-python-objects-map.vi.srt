1
00:00:08,762 --> 00:00:12,930
Đến thời điểm này chúng ta không nói
nhiều về hướng đối tượng python.

2
00:00:12,930 --> 00:00:17,240
Trong khi các chức năng đóng vai trò lớn
trong hệ sinh thái python, python có các lớp

3
00:00:17,240 --> 00:00:21,600
mà có thể kèm theo các phương pháp
và được khởi tạo là các đối tượng.

4
00:00:21,600 --> 00:00:25,350
Bây giờ trong khóa học này không phải các
chi tiết thực chất của đối tượng trong python,

5
00:00:25,350 --> 00:00:27,370
hoặc lập trình hướng đối tượng.

6
00:00:27,370 --> 00:00:30,390
Và thực sự trong khi bạn sử dụng
các đối tượng trong python,

7
00:00:30,390 --> 00:00:33,890
bạn ít có khả năng tạo ta
các lớp mới khi bạn sử dụng

8
00:00:33,890 --> 00:00:36,470
môi trường tương tác bởi vì
nó hơi phức tạp một chút.

9
00:00:36,470 --> 00:00:40,200
Nhưng tôi nghĩ nó rất quan trọng để đi qua
một vài chi tiết của các đối tượng trong python, vì thế

10
00:00:40,200 --> 00:00:41,839
bạn không ngạc nhiên khi bạn thấy chúng.

11
00:00:43,300 --> 00:00:47,430
Đầu tiên bạn có thể xác định một lớp sử dụng
một từ khóa lớp và kết thúc bằng một dấu hai chấm.

12
00:00:48,470 --> 00:00:51,550
Bất kì cái gì lùi vào phía dưới là
trong phạm vi của lớp.

13
00:00:52,580 --> 00:00:56,080
Các lớp trong python được đặt tên sử dụng camel case,

14
00:00:56,080 --> 00:00:59,070
có nghĩa là chữ đầu tiên của
mỗi từ được viết hoa.

15
00:01:00,070 --> 00:01:04,580
Bạn không đưa khai báo các biến bên trong đối tượng,
bạn chỉ muốn bắt đầu sử dụng chúng.

16
00:01:04,580 --> 00:01:06,730
Các biến cũng có thể được khai báo.

17
00:01:06,730 --> 00:01:10,510
Chúng chỉ là các biến được chia sẻ
trên tất cả các instances.

18
00:01:10,510 --> 00:01:13,730
Vì thế trong ví dụ này chúng ta
đang mặc định cho

19
00:01:13,730 --> 00:01:16,430
tất cả mọi người ở trường thông tin.

20
00:01:18,010 --> 00:01:20,760
Nó không có ích ở đây nhưng tôi
muốn hiển thị đầy đủ.

21
00:01:22,520 --> 00:01:26,480
Để xác định một phương pháp bạn
chỉ cần viết nó như bạn có một hàm.

22
00:01:26,480 --> 00:01:30,420
Một thay đổi để có quyền truy cập
vào instance đó thì phương pháp

23
00:01:30,420 --> 00:01:34,480
được kích hoạt, bạn phải tự bao gồm
trong chữ ký của phương pháp.

24
00:01:35,490 --> 00:01:39,800
Tương tự nếu bạn muốn đề cập đến
các biến đặt trong đối tượng,

25
00:01:39,800 --> 00:01:42,590
bạn thêm từ selt ở đầu mỗi từ, với một dấu chấm.

26
00:01:43,600 --> 00:01:48,020
Trong định nghĩa này, ví dụ chúng ta
viết hai phương pháp.

27
00:01:48,020 --> 00:01:50,280
Đặt tên và đặt vị trí.

28
00:01:50,280 --> 00:01:54,800
Và cả hai trường hợp thay đổi biến
gọi là tên và vị trí tương ứng.

29
00:01:56,220 --> 00:01:58,860
Khi chúng ta chạy phần này,
chúng ta không thấy đầu ra.

30
00:01:58,860 --> 00:02:02,950
Lớp tồn tại nhưng chúng ta không
tạo ra bất kì đối tượng nào.

31
00:02:02,950 --> 00:02:06,290
Chúng ta có thể tạo đối tượng cho lớp này
bằng cách lấy tên lớp với

32
00:02:06,290 --> 00:02:07,630
dấu ngoặc đơn đằng sau nó.

33
00:02:08,970 --> 00:02:12,870
Sau đó chúng ta có thể lấy các chức năng và
xuất ra các thuộc tính của lớp sử dụng dấu chấm,

34
00:02:12,870 --> 00:02:15,170
phổ biến trong hầu hết các ngôn ngữ.

35
00:02:16,290 --> 00:02:19,730
Có hai ứng dụng của lập trình hướng
đối tượng trong python,

36
00:02:19,730 --> 00:02:22,910
bạn sẽ rút ra được từ ví dụ rất ngắn gọn này.

37
00:02:22,910 --> 00:02:27,260
Đầu tiên các đối tượng trong python
không có thành viên private hoặc protected.

38
00:02:27,260 --> 00:02:28,740
Nếu bạn tạo một đối tượng,

39
00:02:28,740 --> 00:02:33,140
bạn có đầy đủ quyền truy cập vào các phương pháp
hoặc các thuộc tính của đối tượng đó.

40
00:02:33,140 --> 00:02:34,480
Thứ hai không cần thiết cho

41
00:02:34,480 --> 00:02:38,200
một cấu trúc rõ ràng khi tạo ra
các đối tượng trong python.

42
00:02:38,200 --> 00:02:42,370
Bạn có thể thêm hàm constructor nếu
bạn muốn bằng cách khai báo hàm hai dấu gạch dưới init

43
00:02:42,370 --> 00:02:44,180
hai dấu gạch dưới.

44
00:02:45,590 --> 00:02:49,740
Bây giờ tôi sẽ không đi sâu vào các
đối tượng python nữa bởi vì có rất nhiều

45
00:02:49,740 --> 00:02:53,410
thứ hầu hết đối tượng định hướng tính năng của

46
00:02:53,410 --> 00:02:57,715
python không thực sự nổi bật cho
sự giới thiệu với khoa học dữ liệu.

47
00:02:57,715 --> 00:02:59,235
Nếu bạn quan tâm nhiều hơn

48
00:02:59,235 --> 00:03:03,815
tôi khuyên bạn xem tài liệu
python từ hướng dẫn python.

49
00:03:03,815 --> 00:03:07,550
Nó tổng quan về các tính năng
đối tượng của ngôn ngữ và

50
00:03:07,550 --> 00:03:09,836
có sự tham chiếu trong các nguồn.

51
00:03:11,859 --> 00:03:16,940
Hàm ánh xạ là một trong lập trình
chức năng cơ bản của python.

52
00:03:16,940 --> 00:03:21,310
Lập trình chức năng là một mô hình
lập trình bạn khai báo rõ ràng

53
00:03:21,310 --> 00:03:25,600
tất cả các thông số có thể thay đổi qua
sự thực hiện của hàm đã cho trước.

54
00:03:25,600 --> 00:03:29,980
Như vậy lập trình chức năng
được hiểu ra là miễn phí tác dụng phụ bởi vì

55
00:03:29,980 --> 00:03:35,270
có một hợp đồng phần mềm mô tả cái mà
có thể thay đổi bằng cách gọi một hàm.

56
00:03:35,270 --> 00:03:38,930
Bây giờ python không phải là một
ngôn ngữ lập trình chức năng.

57
00:03:38,930 --> 00:03:41,840
Bởi vì bạn có thể có nhiều tác dụng phụ của
các hàm và chắc chắn bạn không phải

58
00:03:41,840 --> 00:03:44,790
vượt qua các thông số mà bạn
quan tâm đến việc thay đổi.

59
00:03:45,880 --> 00:03:49,200
Nhưng lập trình chức năng tạo ra suy nghĩ nhiều hơn

60
00:03:49,200 --> 00:03:50,840
trong khi xâu chuỗi các hoạt động với nhau.

61
00:03:50,840 --> 00:03:55,230
Và điều này là một loại chủ đề trong
rất nhiều khoa học dữ liệu và

62
00:03:55,230 --> 00:03:57,400
cụ thể là làm sạch dữ liệu.

63
00:03:57,400 --> 00:04:00,520
Vì thế các phương pháp lập trình chức năng
thường được sử dụng trong python,

64
00:04:00,520 --> 00:04:04,826
và nó phổ biến để thấy một thông số
cho một hàm, là hàm của chính nó.

65
00:04:04,826 --> 00:04:10,710
Hàm ánh xạ có sẵn là một ví dụ của tính năng lập trình chức năng

66
00:04:10,710 --> 00:04:15,140
của python, tôi nghĩ các khía cạnh của
ngôn ngữ liên quan đến nhau.

67
00:04:15,140 --> 00:04:17,970
Kí hiệu hàm ánh xạ trông giống như thế này.

68
00:04:17,970 --> 00:04:22,220
Các thông số đầu tiên của hàm bạn
muốn được thực hiện và thông số thứ hai,

69
00:04:22,220 --> 00:04:25,610
và các thông số tiếp theo là
cái mà có thể được lặp.

70
00:04:26,640 --> 00:04:29,400
Tất cả các đối số lặp lại được
giải nén cùng nhau và

71
00:04:29,400 --> 00:04:31,950
đưa vào hàm đã cho trước.

72
00:04:31,950 --> 00:04:35,110
Hơi khó hiểu một chút,
hãy nhìn vào ví dụ.

73
00:04:35,110 --> 00:04:37,120
Giả sử chúng ta có hai danh sách các số,

74
00:04:37,120 --> 00:04:41,290
có thể là giá cả từ hai cửa hàng
khác nhau trên cùng một mặt hàng.

75
00:04:41,290 --> 00:04:44,280
Và chúng ta muốn tìm giá
tối thiểu chúng ta phải trả

76
00:04:44,280 --> 00:04:47,510
nếu chúng ta mua mặt hàng
rẻ hơn giữa hai cửa hàng.

77
00:04:47,510 --> 00:04:51,050
Để làm điều này chúng ta có thể lặp
qua mỗi danh sách, so sánh các mặt hàng và

78
00:04:51,050 --> 00:04:52,860
lựa chọn cái rẻ nhất.

79
00:04:52,860 --> 00:04:56,000
Với bản đồ chúng ta có thể làm sự
so sánh này trong một câu lệnh đơn.

80
00:04:57,230 --> 00:05:00,490
Nhưng khi chúng ta xuất ra ánh xạ, chúng ta
thấy rằng chúng ta có một giá trị tham khảo lẻ

81
00:05:00,490 --> 00:05:03,360
thay vì một danh sách các mặt hàng
chúng ta mong muốn.

82
00:05:03,360 --> 00:05:05,950
Điều này được gọi là đánh giá thông thường.

83
00:05:05,950 --> 00:05:10,010
Trong python hàm ánh xạ trả lại
cho bạn một đối tượng ánh xạ.

84
00:05:10,010 --> 00:05:14,010
Nó không thực sự thử và chạy hàm giữa hai phần tử,

85
00:05:14,010 --> 00:05:16,490
cho tới khi bạn nhìn vào bên trong một giá trị.

86
00:05:16,490 --> 00:05:19,330
Điều này là một mẫu thiết kế thú vị của ngôn ngữ và

87
00:05:19,330 --> 00:05:22,460
nó được sử dụng phổ biến khi xử lí dữ liệu lớn.

88
00:05:22,460 --> 00:05:26,700
Điều này cho phép chúng ta có
sự quản lí bộ nhớ hiệu quả,

89
00:05:26,700 --> 00:05:29,080
mặc dù đôi khi có thể là phức tạp trong tính toán.

90
00:05:30,430 --> 00:05:34,470
Ánh xạ lặp lại giống như danh sách và bộ dữ liệu,
vì thế chúng ta sử dụng cho

91
00:05:34,470 --> 00:05:36,560
vòng lặp để thấy tất cả các giá trị trong ánh xạ.

92
00:05:38,430 --> 00:05:41,980
Điều này thông qua các hàm và
cấu trúc dữ liệu cái mà chúng sẽ được áp dụng,

93
00:05:41,980 --> 00:05:44,360
là một dấu hiệu của lập trình chức năng.

94
00:05:44,360 --> 00:05:47,840
Nó rất phổ biến trong phân tích và làm sạch dữ liệu.

95
00:05:47,840 --> 00:05:51,040
Đây là vấn đề cho bạn để thử, nó
đem đến một số các nhiệm vụ

96
00:05:51,040 --> 00:05:53,300
bạn có thể mong đợi để thực hiện
với việc làm sạch dữ liệu.