1
00:00:08,907 --> 00:00:12,328
Probablemente hayas visto que aparecía la palabra
clave "lambda" entre el contenido de esta semana, y

2
00:00:12,328 --> 00:00:16,196
seguramente la verás con mayor frecuencia 
al pasar más tiempo con Python y

3
00:00:16,196 --> 00:00:17,880
la ciencia de datos.

4
00:00:17,880 --> 00:00:21,770
"Lambda" es la manera que tiene
Python para crear funciones anónimas.

5
00:00:21,770 --> 00:00:24,630
Son similares a otras funciones,
pero no tienen nombre.

6
00:00:24,630 --> 00:00:26,060
La intención es que
sean simples o

7
00:00:26,060 --> 00:00:29,440
de corta duración, y fáciles de
escribirlas en una sola línea

8
00:00:29,440 --> 00:00:32,169
en vez de tener que preocuparse 
de crear una función con nombre.

9
00:00:33,300 --> 00:00:35,460
La sintaxis lambda
es bastante simple.

10
00:00:35,460 --> 00:00:37,590
Pero puede tomar un poco
de tiempo acostumbrarse a ellas.

11
00:00:38,610 --> 00:00:42,270
Declaras una función lambda con la
palabra "lambda" seguida de una lista de

12
00:00:42,270 --> 00:00:47,610
argumentos, luego van dos puntos y
después una sola expresión, y esto es clave.

13
00:00:47,610 --> 00:00:50,596
En una función lambda hay sólo
una expresión a evaluar.

14
00:00:50,596 --> 00:00:54,299
La ejecución de lambda retorna
el valor de la expresión.

15
00:00:55,570 --> 00:00:58,520
El retorno de un lambda
es una referencia.

16
00:00:58,520 --> 00:01:01,550
Así que en este caso,
se ejecutará "my_function" y

17
00:01:01,550 --> 00:01:03,290
se pasan tres
parámetros diferentes.

18
00:01:04,290 --> 00:01:07,530
Ten en cuenta que los parámetros lambda
no pueden tener valores por defecto y

19
00:01:07,530 --> 00:01:10,870
no se puede tener una lógica compleja
dentro de la propia función lambda

20
00:01:10,870 --> 00:01:12,950
pues estás limitado
a una simple expresión.

21
00:01:14,130 --> 00:01:18,420
Las lambdas son mucho más limitadas
que las definiciones de funciones completas.

22
00:01:18,420 --> 00:01:22,360
Pero creo que son muy útiles
para tareas sencillas de limpieza de datos.

23
00:01:22,360 --> 00:01:25,040
Encontrarás muchos ejemplos
con lambdas en la web.

24
00:01:25,040 --> 00:01:27,530
Deberías ser capaz de
leer y escribir lambdas.

25
00:01:27,530 --> 00:01:28,510
Probemos ahora...

26
00:01:30,800 --> 00:01:33,530
Hemos aprendido mucho
sobre secuencias en Python.

27
00:01:33,530 --> 00:01:36,470
tuplas, listas,
diccionarios, etc.

28
00:01:37,510 --> 00:01:40,580
Las secuencias son estructuras
sobre las que podemos iterar, y

29
00:01:40,580 --> 00:01:44,590
A menudo las creamos a través de bucles
o leyendo los datos de un archivo.

30
00:01:45,850 --> 00:01:50,720
Python ha incorporado soporte para la
creación de estas colecciones usando una 

31
00:01:50,720 --> 00:01:53,140
sintáxis más abreviada denominada
"listas de comprensión"

32
00:01:54,230 --> 00:01:55,690
Pero la ciencia forense no es muy buena determinando Mens Rea, la intención.

33
00:01:55,690 --> 00:01:58,380
Primero escribimos
un bucle "for".

34
00:01:58,380 --> 00:02:02,740
Aquí estoy iterando entre cero y 1.000
para luego comprobar con el operador

35
00:02:02,740 --> 00:02:07,230
módulo si hay resto decimal
al dividir el número por dos.

36
00:02:07,230 --> 00:02:10,880
Si el resultado es cero,
entonces sé que

37
00:02:10,880 --> 00:02:13,530
el número es par.
Y lo añado a la lista.

38
00:02:15,450 --> 00:02:18,360
Podemos reescribir esto como 
una "lista de comprensión"

39
00:02:18,360 --> 00:02:20,980
Escribiendo la
iteración en una línea.

40
00:02:20,980 --> 00:02:24,300
Comenzamos con el valor
que queremos en la lista.

41
00:02:24,300 --> 00:02:25,770
En este caso,
es un número.

42
00:02:25,770 --> 00:02:31,030
Luego lo pongo en el bucle "for" y
finalmente, agrego una condición.

43
00:02:31,030 --> 00:02:33,920
Esto tiene un formato
mucho más compacto.

44
00:02:33,920 --> 00:02:35,690
Y también tiende
a ser más rápido.

45
00:02:36,910 --> 00:02:40,890
Al igual que las lambdas, las listas de comprensión
tienen un formato condensado

46
00:02:40,890 --> 00:02:44,030
que las hace más legibles,
tienen mayor rendimiento y

47
00:02:44,030 --> 00:02:49,190
y las encontrarás en tutoriales de ciencia de datos
o "Stack Overflow".

48
00:02:49,190 --> 00:02:53,170
Pero no estás obligado a utilizarlas
en las tareas del curso.

49
00:02:53,170 --> 00:02:56,702
¿Por qué no intentas convertir ahora una
función en una lista de comprensión?