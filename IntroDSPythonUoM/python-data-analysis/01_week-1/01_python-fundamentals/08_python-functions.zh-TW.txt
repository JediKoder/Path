在本單元的其餘部分， 我將提供Python程式語言的基本概述。 如果你有編寫程式的背景， 這個概述應該足以幫助你在本課程的其餘部分 和本專業課程裏的其他課程中取得成功。 如果你沒有編寫程式的經驗，或者 覺得內容太過於挑戰，那麼我會鼓勵你暫時停下來， 並選上一些編寫程式的入門課程。 我的一位同事，Chuck Severance博士為Coursera提供了一個很好的專業課程， 名字為'Python for Everybody'。 你可以在Coursera課程資料中找到該連結。 Coursera系統允許你以兩種方式從瀏覽器運行Python的程式。 首先，我們可以使用出現在影片內的問題提示， 你可以在瀏覽器裏嘗試並解決這個問題。 這是一個Coursera平台的新功能， 我們將在接下來的幾個課程中嘗試一下。 其次，Coursera系統已經與Jupyter電腦筆記本相整合。 這些電腦筆記本允許你將程式分解為所謂的單元， 並根據需要執行來這些單元。 關於這些電腦筆記本的好處是它們提供了一個半永久性 的存儲空間用來學習，你可以進行實驗 和寫程式，而不需要在電腦上安裝任何東西。 所有的作業將在Jupyter筆記本中完成，但你也可以自行 下載並安裝Python，Jupyter，和所有你需要的，相關的程式庫 在你自己的電腦上，如果你比較喜歡。 我們的教程助理將概述這個安裝過程。 在下一個影片中，如何在你自己的電腦安裝Jupyter電腦筆記本， 為那些有興趣的人。我將在課程中概述如何在Coursera環境中 使用這些電腦筆記本。 但現在，讓我們來討論一些基本的Python。 首先，Python是一種高級程式語言，這意味著它是針對 人的能夠理解，而不是機器來進行優化的。 它也是一種直譯語言，這意味著它不直接編譯為 機器碼，更重要的是，它通常以互動方式來使用。 這可能會有很大差異，如果你習慣於像Java或C這類的程式， 你寫程式，編譯它，運行並查看它的輸出。 在Python中，你可以啟動互動式直譯器，開始編寫程式， 直譯器會進行評估你編寫的每一行程式。 這是非常有用的，在對於需要大量調查研究的程式工作來說， 對比於那些先需要大量設計的程式工作。 Shell腳本就是其中的一個例子。 數據清理是另一個。 雖然你可以編寫完全的腳本然後執行程式，類似你可能 用過的其他程式語言， 但我們在這整個專業化課程中， 將以這種互動方式來使用Python。 來自Java或C背景的一些程式設計師的一個共同驚喜是， Python是一種動態類型的語言，類似於JavaScript等語言。 這意味著當你聲明一個變數時， 你可以在上一行將其指定為整數，並在下一行將其指定為字符串。 由於沒有編譯(compile)步驟， 你沒有任何人來幫助你處理變數的類型。 當你使用它時，你需要檢查功能存在與否? 或 嘗試使用其功能，並抓到可能發生的任何錯誤。 Python的動態類型是特別有益的， 當以互動方式使用時，因為它允許你快速的設置和 修改變量內容，而無需擔心變數的 底層語法定義。 好的，我們來舉個例子。 對於我將向你展示的所有程式例子，你將可以在課程資源的部分 找到筆記本的註釋版本，而且有更多註解。 如果你願意，歡迎隨時跟隨那裏，或創建一個新的筆記本， 積極寫程式，如果你喜歡的話。 Python只有很少的內定程式 事實上，如果你只想設置一些變數的值， 並將這些變數加在一起的結果輸出，你可以用三行程式來做。 在這個例子中，我將寫三個陳述式。 前兩個設置變數x和y，每個都是整數值。 然後我們做一個加法。 我們可以通過點擊shift+enter來運行這個單元，或 點擊工具欄中的'進行'圖示。 程式的輸出會立即印出來。 如果你在非互動模式下使用Python，則不會印出任何結果。 但是，由於我們以互動模式使用它，我們立即獲得該值。 真正發生的是瀏覽器將你的Python程式 發送到雲端中的一台電腦機器， 該電腦機器執行Python 3直譯器的代碼，並將結果發送回來。 我們可以看到，在執行一個單元後，下面為我們創建了一個新的空單元。 如果我們只是放x，然後執行，我們得到的是1. 所以重要的是要知道Python直譯器是有狀態的。 也就是說，你的變數存在於單元格之間。 除此之外，如果我們回去改變上一個單元中的某些內容， 我們必須重新執行腳本，以使這些更改發生。 重新啟動並運行所有功能特別有用，因為它會擦除 直譯器狀態，並重新運行當前筆記本中的所有單元。 你會注意到，Python不需要使用 關鍵字，諸如用var來聲明一個變數名稱，或 用分號在行末尾，在其他程式語言中常用的。 Python利用空白來理解函數和迴路的範疇， 以及行尾符號來理解程式語句的結尾。 當然，Python具有諸如函數之類的傳統軟體結構。 這是一個例子，將之前的程式重構成一個函數。 你會看到'def'語句，表明我們正在寫一個函數。 然後作為函數的一部分，每一行都需要 使用製表符(Tab)或縮進幾個空格。 再次，因為我們處於互動式的環境中，當程式語句在 shift+enter上進行評估時，結果將在下面立即印出來。 這是我們第一個互動式程式。 讓你試試，改變這個函數來接受三個參數而不是兩個， 並返回所有這三個參數的總和。 好的，功能很棒，但是它們有一點不同於 其他語言，這裡有一些微妙之處。 首先，由於沒有類型，你不需要設置返回的類型。 其次，你實際上不必使用return語句。 有一個名為'None'的特殊值返回。 None與Java中的null類似，表示缺少或者沒有值。 第三，在Python中，你可以設置參數的預設值。 這裡有個例子，這裡有個例子， 在這個例子中，我們可以重寫add_numbers函數來接受三個參數， 但我們可以設最後的參數
為預設的 None 這意味著你可以使用兩個值或三個值來調用add_numbers，而 不必重寫函數來重載(Overloading)它。 這裡有一個重要的暗示含義。 所有可選用的參數，那些有預設值的， 都需要放在函數聲明的最末尾。 這也意味著你可以傳遞可選參數為一個標記值。 以下是有標記參數的例子。 我們可以重寫該函數，以便有兩個可選參數。 如果我們只用兩個數字來呼叫該函數，但也 設置了標記值，我們必須有明確地資料名稱， 並將已標記的參數設置為True時，來調用該函數。 到現在，你也看到了使用print語句。 我們將更詳細地介紹'字串'(strings)， print將會拿一個項目，嘗試將其轉換為字串，然後輸出。 我們不會在直譯器的互動模式中使用這麼多print，但是 當我們要從單一個單元格來印出多個輸出值時，這很有用。 好的，關於基本的Python函數最後一句話。 在 Python 中，可以將一個變數分配給一個函數。 這可能看起來完全正常，或 完全奇怪，取決於你的編寫程式背景。 通過指定一個函數到一個變數，你可以將該變數傳遞給 其他函數，這會允許一些基本的功能程式。 我們會在稍後課程再談一談。 這裡是一個例子，我們定義一個函數來加數字， 然後我們將該函數賦給一個變數，然後我們調用該變數。