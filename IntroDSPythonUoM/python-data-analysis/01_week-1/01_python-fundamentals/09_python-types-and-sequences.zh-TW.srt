1
00:00:08,722 --> 00:00:12,830
Python沒有靜態類型並不意味著Python中沒有類型。

2
00:00:12,830 --> 00:00:16,738
Python語言有一個內置的函數，稱為type，它將顯示

3
00:00:16,738 --> 00:00:18,513
提及的是什麼類型。

4
00:00:18,513 --> 00:00:22,890
一些常見的類型包括字串(string)，和我們已經討論過的None類型

5
00:00:22,890 --> 00:00:25,480
整數(interger)和浮點(floating-point)變數。

6
00:00:25,480 --> 00:00:28,580
如我們所見，您可以有參考函數以及

7
00:00:28,580 --> 00:00:30,050
函數類型也存在。

8
00:00:31,640 --> 00:00:34,310
有類型的物件具有與它們相關聯的屬性，

9
00:00:34,310 --> 00:00:37,110
這些屬性可以是數據或函數。

10
00:00:37,110 --> 00:00:41,165
許多Python構建於不同的序列或集合類型。

11
00:00:41,165 --> 00:00:45,150
有三種原始的集合類型，我們將要討論，

12
00:00:45,150 --> 00:00:47,710
元組(tuple)，列表(list)和字典(dictionary)。

13
00:00:49,370 --> 00:00:53,028
元組(tuple)是一個本身不可變的變數序列。

14
00:00:53,028 --> 00:00:55,851
這意味著元組(tuple)含有次序的項目，

15
00:00:55,851 --> 00:00:58,680
而且一旦創建就不能更改。

16
00:00:58,680 --> 00:01:02,968
我們使用括號來表示元組(tuple)，我們可以混合不同的類型

17
00:01:02,968 --> 00:01:03,707
在元組裡。

18
00:01:03,707 --> 00:01:06,380
這是一個有四個項目的元組(tuple)。

19
00:01:06,380 --> 00:01:08,150
兩個是數字，兩個是字串(string)。

20
00:01:09,230 --> 00:01:11,190
請注意這裡，我已經使用單引號的

21
00:01:11,190 --> 00:01:14,660
字串(string)，而以前我已經使用雙引號。

22
00:01:14,660 --> 00:01:19,390
在Python中，單引號或雙引號都可用於表示字串(string)。

23
00:01:21,020 --> 00:01:23,880
列表(list)非常相似，但它們可以是可以改變的，

24
00:01:23,880 --> 00:01:27,440
因此你可以更改其長度，元件的數量和更改元件。

25
00:01:28,900 --> 00:01:31,683
我們使用方括號來表示列表(list)。

26
00:01:31,683 --> 00:01:35,340
有幾種不同的方式來更改列表的內容。

27
00:01:35,340 --> 00:01:39,738
一個是通過附加功能，允許你將新項目附加到

28
00:01:39,738 --> 00:01:40,467
列表的末尾。

29
00:01:42,557 --> 00:01:45,175
列表(list)和元組(tuple)都是可以反覆迭代的類型，因此

30
00:01:45,175 --> 00:01:49,340
您可以寫迴圈去遍歷它的每個元件。

31
00:01:49,340 --> 00:01:53,760
通常的標準是，如果你想查看列表中的每個項目是使用一個for語句。

32
00:01:53,760 --> 00:01:58,740
這與Java和C＃等語言中的for-each迴圈類似，

33
00:01:58,740 --> 00:02:00,700
但請注意，不需要指定類型。

34
00:02:03,270 --> 00:02:07,360
列表(list)和元組(tuple)的數組也可以存取，類似存取陣列(array)在其他語言，

35
00:02:07,360 --> 00:02:12,000
通過使用方括號運算程序，它叫做索引運算程序。

36
00:02:12,000 --> 00:02:15,175
列表(list)的第一個項目從零開始，

37
00:02:15,175 --> 00:02:19,013
要獲取列表的長度，我們使用內置的len函數。

38
00:02:19,013 --> 00:02:22,837
還有一些其他常見的功能，你可能會料想到，像最小(min)和最

39
00:02:22,837 --> 00:02:26,800
大值(max)，它會找到列表或元組中的最小值或最大值。

40
00:02:28,465 --> 00:02:29,410
Python列表(list)和

41
00:02:29,410 --> 00:02:34,420
元組(tuple)也可以允許有一些基本的數學運算。

42
00:02:34,420 --> 00:02:38,100
例如加號(+)把列表(list)連接起來。

43
00:02:38,100 --> 00:02:41,380
星號(*乘號)重複列表的值。

44
00:02:41,380 --> 00:02:45,620
一個非常常見的運算符是in運算符。

45
00:02:45,620 --> 00:02:49,810
這將查看項目是否隸屬在組合中，並返回一個布爾值(boolean-value)，true或false，

46
00:02:49,810 --> 00:02:54,770
根據一個項目是否在給定的列表中。

47
00:02:54,770 --> 00:02:58,570
我們將會更深入運算符和特殊類型的序列

48
00:02:58,570 --> 00:03:02,020
在未來的一周，當我們研究一種技術稱為廣播(broadcasting)的時候。

49
00:03:03,380 --> 00:03:08,090
也許最有趣的操作，你可以使用在列表稱為切片(slicing)。

50
00:03:08,090 --> 00:03:11,920
其中用於存取元素的方括號陣列語法，可能看起來與

51
00:03:11,920 --> 00:03:15,200
你在其他語言中看到的語法相似。

52
00:03:15,200 --> 00:03:20,070
在Python中，索引操作允許你使用多個數值。

53
00:03:20,070 --> 00:03:22,405
第一個參數是起始位置，

54
00:03:22,405 --> 00:03:26,315
如果這是唯一的元素，然後一個項目從列表中返回。

55
00:03:26,315 --> 00:03:29,015
第二個參數是切片的結尾。

56
00:03:29,015 --> 00:03:33,815
這一個結尾是不包括的，所以如果你的第一個參數為零，

57
00:03:33,815 --> 00:03:36,795
下一個參數為1，那麼你只得到一個項目。

58
00:03:37,940 --> 00:03:40,580
這很容易用一個例子來解釋。

59
00:03:40,580 --> 00:03:44,100
Python的一個方便之處在於，所有的字串(string)實際上

60
00:03:44,100 --> 00:03:48,770
只是字的列表(list)，所以對它們用切片是很容易的。

61
00:03:48,770 --> 00:03:49,960
這裡有個例子，這裡有個例子，

62
00:03:49,960 --> 00:03:57,320
當我們運行x[0]或x[0：1]時，我們只得到字串的第一個字。

63
00:03:57,320 --> 00:04:02,240
但是當我們運行x[0：2]時，我們得到字串的前兩個字。

64
00:04:03,350 --> 00:04:07,210
我們的索引值也可以是負數，這真的很酷。

65
00:04:07,210 --> 00:04:10,465
這意味著從字串的後面索引。

66
00:04:10,465 --> 00:04:16,799
所以x[-1]得到我們字串的最後一個字，而x[-4：-2]

67
00:04:16,799 --> 00:04:21,815
讀取從最後的第4個到最後第2個位置的所有的字。

68
00:04:22,885 --> 00:04:25,245
最後，如果我們想要引用到字串的開端或

69
00:04:25,245 --> 00:04:29,910
結尾，我們可以通過只將參數留空白。

70
00:04:29,910 --> 00:04:35,584
所以x[：3]從第一個字開始，直到位置3。

71
00:04:35,584 --> 00:04:40,502
而x[3：]從第四個字開始，因為索引總是從

72
00:04:40,502 --> 00:04:43,050
零開始，一直到列表的末尾。

73
00:04:44,290 --> 00:04:46,910
切片是Python語言的核心，

74
00:04:46,910 --> 00:04:50,330
也是Python的科學計算的重要組成部分。

75
00:04:50,330 --> 00:04:53,480
特別是如果你開始矩陣(matrix)的操作。

76
00:04:53,480 --> 00:04:56,370
我們將在下一組課程中詳細介紹切片。

77
00:04:56,370 --> 00:04:58,345
但這是一個讓你開始的問題。

78
00:05:00,499 --> 00:05:04,940
現在，我在這裡稍微談一談操縱字串。

79
00:05:04,940 --> 00:05:07,450
切片不是操作字串的唯一方法。

80
00:05:07,450 --> 00:05:10,990
一個常見的活動是根據子字串(substring)來分割字串。

81
00:05:10,990 --> 00:05:13,360
也就是說，通過整個字串來尋找其中的模式，

82
00:05:13,360 --> 00:05:15,880
並適當地分割它。

83
00:05:15,880 --> 00:05:18,330
這被稱為正則表達式(regular-expression)評估，

84
00:05:18,330 --> 00:05:22,170
我們將在專業領域課程中詳細介紹這一點，

85
00:05:22,170 --> 00:05:25,860
在涉及文本數據挖掘(text-mining)的部分，因為它是一個常見的操作。

86
00:05:25,860 --> 00:05:28,387
但Python有一些文本分析的基本工具。

87
00:05:28,387 --> 00:05:29,800
我要在這裡顯示給你們。

88
00:05:31,490 --> 00:05:34,800
我們看到，字串只是字的列表。

89
00:05:34,800 --> 00:05:38,800
所以你可以在列表(list)中執行的操作，也可以在字串(string)上執行。

90
00:05:38,800 --> 00:05:43,260
這意味著你可以使用加號運算(+)將兩個字串連接起來。

91
00:05:43,260 --> 00:05:46,730
並且用乘法運算(*)來重複給定的字串。

92
00:05:46,730 --> 00:05:50,080
你也可以搜索字串使用in操作符。

93
00:05:51,380 --> 00:05:54,047
字串(string)類型具有關聯的函數稱為拆分(split)。

94
00:05:55,240 --> 00:06:00,530
此函數將字串分解成
子字串基於簡單的模式

95
00:06:00,530 --> 00:06:01,810
例如這裡，

96
00:06:01,810 --> 00:06:06,030
我將根據空格字符的存在來分割我的全名。

97
00:06:06,030 --> 00:06:08,420
結果是四個元件的列表。

98
00:06:08,420 --> 00:06:12,510
我們可以選擇索引運算的第一個元素作為名字，

99
00:06:12,510 --> 00:06:14,060
最後一個元素是我的姓氏。

100
00:06:15,890 --> 00:06:18,570
我們會在字串上多談一點點，但在我們做之前，

101
00:06:18,570 --> 00:06:20,234
我想談談字典(dictionaries)。

102
00:06:20,234 --> 00:06:23,923
字典(dictionaries)類似於列表和元組，它們包含一些集合

103
00:06:23,923 --> 00:06:28,110
的項目，但它們是有標記而沒有排序的集合。

104
00:06:28,110 --> 00:06:31,430
這意味著每一個插入字典的值，

105
00:06:31,430 --> 00:06:34,490
您還必須要提供一個鍵(key)來獲取該值。

106
00:06:34,490 --> 00:06:37,130
在其他語言中，這種結構通常被稱為地圖。

107
00:06:37,130 --> 00:06:40,940
在Python中，我們使用大括號{}表示字典。

108
00:06:40,940 --> 00:06:44,710
以下的示例是我們將名字連接到電子郵件地址。

109
00:06:44,710 --> 00:06:48,580
你可以看到，當我們表示一個創建的字典項目時，

110
00:06:48,580 --> 00:06:51,485
會使用一個冒號(:)來分隔一對值。

111
00:06:51,485 --> 00:06:55,520
然後，你可以檢索給定標記的值，使用索引運算。

112
00:06:56,820 --> 00:07:00,349
你在字典中用於索引或值的類型可以是任何類型。

113
00:07:00,349 --> 00:07:02,870
如果你喜歡，這可能是一個混合的類型。

114
00:07:03,880 --> 00:07:07,700
我們可以將新項目添加到字典中，使用相同的索引運算符，

115
00:07:07,700 --> 00:07:08,910
我們剛剛用過的，

116
00:07:08,910 --> 00:07:10,640
放在一個程式的左邊。

117
00:07:11,800 --> 00:07:16,420
你可以通過多種方式反覆迭代字典中的所有項目。

118
00:07:16,420 --> 00:07:18,910
首先，你可以迭代所有的鍵keys，

119
00:07:18,910 --> 00:07:20,810
只挑出適合你的需要的內容即可。

120
00:07:21,850 --> 00:07:25,190
或者你可以反覆迭代值(value)，而忽略不理鍵(key)。

121
00:07:26,840 --> 00:07:29,530
最後，你可以同時迭代value和key兩者，

122
00:07:29,530 --> 00:07:31,950
使用item的功能。

123
00:07:33,550 --> 00:07:35,930
最後一個例子有點不同，

124
00:07:35,930 --> 00:07:38,760
這是一個叫做拆解的例子。

125
00:07:38,760 --> 00:07:42,470
在Python中，你可以有序列sequence-亦即有數據的list或tuple，

126
00:07:42,470 --> 00:07:47,010
你可以將這些項目分解成不同的變數,

127
00:07:47,010 --> 00:07:48,480
用一個指定(assignment)語句。

128
00:07:48,480 --> 00:07:51,830
這是另一個例子，我們有一個元組(tuple)，有我的名字，

129
00:07:51,830 --> 00:07:53,840
姓氏和電子郵件地址。

130
00:07:53,840 --> 00:07:56,960
我聲明三個變量並將它們指派給元組(tuple)。

131
00:07:56,960 --> 00:07:59,330
在內部，Python已經拆解了元組，

132
00:07:59,330 --> 00:08:02,000
並按順序分配了這些變量。

133
00:08:02,000 --> 00:08:04,470
我們可以看到，如果我們向元組添加第四個項目，

134
00:08:04,470 --> 00:08:07,280
Python不知道如何拆解，所以我們有一個錯誤。

135
00:08:08,660 --> 00:08:11,020
這是Python內置類型的概述。

136
00:08:12,060 --> 00:08:15,390
在接下來的講課中，我們將簡要回顧一下字串，

137
00:08:15,390 --> 00:08:16,980
然後開始使用一些數據檔案。