1
00:00:08,987 --> 00:00:12,782
歡迎來到今天的課程，我們會在這裡學習到基本的迭代

2
00:00:12,782 --> 00:00:16,370
通過一個.csv文件，來創建字典和收集匯總統計。

3
00:00:17,770 --> 00:00:22,870
首先，讓我們導入.csv程序模組，它將幫助我們去讀進我們的.csv文件。

4
00:00:24,560 --> 00:00:26,732
使用一些Python魔法，

5
00:00:26,732 --> 00:00:31,557
讓我們設置列印的浮點數據精度為2。

6
00:00:31,557 --> 00:00:35,772
現在讓我們使用csv.DictReader讀取我們的mpg.csv

7
00:00:35,772 --> 00:00:38,530
並將其轉換為列表的字典。

8
00:00:39,880 --> 00:00:42,170
我們來看看我們列表中的前三個元素。

9
00:00:44,100 --> 00:00:48,190
我們可以看到列表中的字典具有.csv的列欄名稱

10
00:00:48,190 --> 00:00:51,710
作為keys，和每個特定車的數據都是它的values。

11
00:00:53,460 --> 00:00:55,970
我們的列表的長度是234，

12
00:00:55,970 --> 00:01:00,240
這意味著我們有234個汽車的字典在.csv文件中。

13
00:01:02,490 --> 00:01:06,308
我們可以查看.csv列欄名稱，使用key的方法。

14
00:01:08,354 --> 00:01:13,670
假設我們要找到所有車輛的平均城市mpg，從我們的.csv文件。

15
00:01:15,080 --> 00:01:19,430
我們總計列表中的所有字典的城市mpg資料，

16
00:01:19,430 --> 00:01:20,629
並除以列表的長度。

17
00:01:21,770 --> 00:01:24,860
因為我們的字典中所有的值的類型都是strings，

18
00:01:24,860 --> 00:01:27,830
所以我們需要轉換為float來執行數學運算。

19
00:01:30,502 --> 00:01:36,420
同樣的，我們可以在我們的.csv文件中找到所有汽車的平均公路mpg。

20
00:01:36,420 --> 00:01:40,063
平均公路燃油經濟性高於

21
00:01:40,063 --> 00:01:40,609
城市是合理的。

22
00:01:42,600 --> 00:01:44,490
現在，讓我們看看一個更複雜的例子。

23
00:01:45,815 --> 00:01:49,180
比如說我們想要知道平均城市mpg是什麼，

24
00:01:49,180 --> 00:01:51,390
但按照一輛車的汽缸數目來分組。

25
00:01:52,570 --> 00:01:56,420
從字典的汽缸資料創建一組數值，

26
00:01:56,420 --> 00:01:59,499
會給我們的獨特的汽缸數目。

27
00:02:00,540 --> 00:02:04,530
我們看到我們車的資料有4、5、6和8個汽缸。

28
00:02:06,160 --> 00:02:10,600
首先，我們將創建一個空的list，我們將在其中存儲我們的計算。

29
00:02:10,600 --> 00:02:14,510
接下來，讓我們迭代所有的汽缸數目。

30
00:02:14,510 --> 00:02:16,359
然後我們將反覆迭代所有的字典。

31
00:02:18,420 --> 00:02:21,020
如果我們在字典的汽缸數目級別，

32
00:02:21,020 --> 00:02:24,710
符合我們要計算的平均水準的汽缸數目級別，

33
00:02:24,710 --> 00:02:29,730
我們加mpg數值到我們的summpg變數和遞增計數。

34
00:02:31,740 --> 00:02:36,750
經過所有的字典資料，我們計算平均mpg和

35
00:02:36,750 --> 00:02:37,480
將它添加到我們的列表中。

36
00:02:39,250 --> 00:02:40,471
為了讓事情更清楚，

37
00:02:40,471 --> 00:02:43,970
我將列表從最低數目的汽缸排列到最高的。

38
00:02:43,970 --> 00:02:48,290
我們可以看到城市燃油經濟性似乎在下降，隨著

39
00:02:48,290 --> 00:02:49,590
汽缸的數目增加。

40
00:02:51,160 --> 00:02:52,670
讓我們看多一個類似的例子。

41
00:02:54,408 --> 00:02:57,360
假設我們有興趣尋找平均公路mpg

42
00:02:57,360 --> 00:02:58,659
在不同的車輛類別中。

43
00:02:59,820 --> 00:03:04,743
從不同車輛類別來看，我們有2座車、小型車、中型車，

44
00:03:04,743 --> 00:03:07,320
迷你麵包車、小貨車、微型車和運動型多用途車SUV。

45
00:03:09,160 --> 00:03:13,035
同樣與上一個例子，我們遍歷所有類別的車輛，

46
00:03:13,035 --> 00:03:15,100
然後我們將反覆迭代所有的字典。

47
00:03:16,580 --> 00:03:17,760
如果車輛類別

48
00:03:17,760 --> 00:03:21,420
在字典裡與我們正在計算平均公路mpg的車輛類別相符合

49
00:03:21,420 --> 00:03:25,130
，我們將值添加到我們的總數，並遞增計數。

50
00:03:26,890 --> 00:03:30,370
然後我們進行平均計算，並將其追加到我們的清單中。

51
00:03:31,960 --> 00:03:34,720
這次，讓我們列表從最低mpg到最高的進行排序。

52
00:03:35,720 --> 00:03:39,220
看起來像小貨車有最糟糕的燃油經濟性，小型車的最好。

53
00:03:40,680 --> 00:03:43,850
這就是通過迭代來總結數據的方法。

54
00:03:43,850 --> 00:03:46,948
不要擔心，如果這似乎有點低效或乏味。

55
00:03:46,948 --> 00:03:50,770
下個星期，我們將會學習Pandas，一個Python程序模組，可以在Python中

56
00:03:50,770 --> 00:03:54,960
實現更簡單，更高效，更強大的數據分析。

57
00:03:54,960 --> 00:03:55,820
感謝收看！

58
00:03:55,820 --> 00:03:56,640
感謝您的收看。希望能很快見到你。