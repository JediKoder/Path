1
00:00:08,684 --> 00:00:11,363
常見的工作流程是將數據讀入DataFrame，

2
00:00:11,363 --> 00:00:14,042
然後將該DataFrame減少到特定的列(column)

3
00:00:14,042 --> 00:00:17,260
或行(row)，你有興趣處理的。

4
00:00:17,260 --> 00:00:20,500
如您所見，Pandas的工具組試圖給你DataFrame的視圖。

5
00:00:20,500 --> 00:00:24,650
這是比複製資料快得多，和更有效率的使用記憶體。

6
00:00:25,740 --> 00:00:28,800
但是它的確意味著，如果你正在操作數據，則必須注意，

7
00:00:28,800 --> 00:00:31,430
任何更改在你處理的DataFrame，

8
00:00:31,430 --> 00:00:34,630
可能會對你最初使用的基本DataFrame產生影響。

9
00:00:35,810 --> 00:00:39,380
以下是使用我們相同的採購DataFrame的例子。

10
00:00:39,380 --> 00:00:44,460
我們可以創建一個列表使用方括號，只用cost類別。

11
00:00:44,460 --> 00:00:48,540
那麼我們可以通過廣播(broadcasting)來增加這個列表裏的費用。

12
00:00:48,540 --> 00:00:53,620
現在，如果我們看看我們原來的DataFrame，我們看到這些費用也增加了。

13
00:00:53,620 --> 00:00:56,150
這是值得注意的重要考慮因素。

14
00:00:56,150 --> 00:00:58,113
如果要明確地使用一個副本，

15
00:00:58,113 --> 00:01:02,511
那麼你應該首先考慮在DataFrame上調用copy方法。

16
00:01:04,327 --> 00:01:08,930
在這個課程中，我們將主要使用較小的中等大小的數據集。

17
00:01:08,930 --> 00:01:09,700
正如我提到的，

18
00:01:09,700 --> 00:01:14,470
通常的工作流程是讀取一些外部的文件數據集。

19
00:01:14,470 --> 00:01:18,630
我們以前看過如何使用Python，列表(list)和字典(dictionary)來做到這一點。

20
00:01:18,630 --> 00:01:22,190
你可以想像如何使用這些dictionary來創建一個Pandas的DataFrame。

21
00:01:23,310 --> 00:01:25,620
幸運的是，Pandas有內置的支持，對於

22
00:01:25,620 --> 00:01:29,140
例如分隔文件（如.CSV文件）以及各種

23
00:01:29,140 --> 00:01:33,850
其他數據格式，包括關連資料庫，Excel和HTML表。

24
00:01:34,990 --> 00:01:37,440
我保存了一個名為olympics.csv的CSV文件，

25
00:01:37,440 --> 00:01:41,940
其中包含維基百科的數據，包含了獎牌的總結列表，

26
00:01:41,940 --> 00:01:43,690
關於各國在奧運會贏得的。

27
00:01:44,950 --> 00:01:48,180
我們可以使用shell命令cat來查看這個文件。

28
00:01:48,180 --> 00:01:51,110
我們可以直接調用使用驚嘆號(!)。

29
00:01:52,110 --> 00:01:55,550
這裡發生的情況是，當Jupyter筆記本看到一行操作

30
00:01:55,550 --> 00:02:00,632
以驚嘆號開始的時，它會將其餘的命令發送到操作系統shell

31
00:02:00,632 --> 00:02:01,540
去進行評估。

32
00:02:01,540 --> 00:02:05,690
所以cat可以運行在Linux和Mac以及Coursera平台上，

33
00:02:05,690 --> 00:02:07,610
但可能無法在Windows上運行。

34
00:02:07,610 --> 00:02:09,310
你不用擔心太多了。

35
00:02:09,310 --> 00:02:12,752
我只是想展示Jupyter筆記本電腦如何與作業系統整合，

36
00:02:12,752 --> 00:02:15,618
為你提供更多的工具來查看你的數據。

37
00:02:17,346 --> 00:02:20,490
我們從cat輸出中看到似乎有一列(column)的數值，

38
00:02:20,490 --> 00:02:24,240
後面跟著一堆列(column)的標籤。

39
00:02:24,240 --> 00:02:27,470
在列的標籤中有一些奇怪的字符。

40
00:02:27,470 --> 00:02:30,510
這是unicode numero符號，意思是數量。

41
00:02:31,630 --> 00:02:33,990
然後我們有許多行(row)的數據，都根據列(column)來分隔。

42
00:02:35,270 --> 00:02:38,170
我們可以將其讀入DataFrame，通過呼叫read_csv

43
00:02:38,170 --> 00:02:40,200
模組函數

44
00:02:40,200 --> 00:02:43,610
當我們看到DataFrame時，我們看到第一個單元格中有一個NaN，

45
00:02:43,610 --> 00:02:47,320
因為它是一個空值，並且這些行已經為我們自動編入索引(index)。

46
00:02:48,680 --> 00:02:51,890
很明顯，DataFrame中的第一行(row)數據

47
00:02:51,890 --> 00:02:53,390
是我們真正希望看到的列名標籤。

48
00:02:53,390 --> 00:02:57,500
數據中的第一列(column)似乎也是國家的名稱，

49
00:02:57,500 --> 00:02:58,990
我們想用它來做成索引(index)。

50
00:03:00,170 --> 00:03:04,060
讀取csv有一些參數，我們可以使用它來指示

51
00:03:04,060 --> 00:03:06,429
Pandas如何來標記行和列。

52
00:03:08,320 --> 00:03:13,380
例如，我們可以使用index_col來指示哪個列應該是索引，

53
00:03:13,380 --> 00:03:17,180
我們也可以使用header參數來指示數據文件中哪一行(row)

54
00:03:17,180 --> 00:03:19,010
應該用作標籤。

55
00:03:19,010 --> 00:03:23,732
讓我們重新導入數據，和設置索引值index_col為0，這是第一列，

56
00:03:23,732 --> 00:03:27,458
並設置列的標籤從第二行數據來讀取。

57
00:03:27,458 --> 00:03:30,060
我們可以通過使用skiprows參數來做到這一點，

58
00:03:30,060 --> 00:03:34,316
告訴Pandas去忽略由數字組成的第一行。

59
00:03:36,758 --> 00:03:41,520
現在這個數據來自維基百科的所有奧運會獎牌。

60
00:03:41,520 --> 00:03:46,897
如果我們來到這個頁面，我們可以看到，這些頁面沒有用金，銀和

61
00:03:46,897 --> 00:03:51,839
銅牌，而是用一個漂亮的小圖標，加上一個1，一個2，

62
00:03:51,839 --> 00:03:57,564
另外一個3在裏面。在我們的csv文件中，它們用字串01！來表示

63
00:03:57,564 --> 00:03:59,090
，02！等等。

64
00:03:59,090 --> 00:04:03,510
我們看到列(column)的值被重複，這真的不是很好的做法。

65
00:04:03,510 --> 00:04:08,759
Pandas認識到這一點，而附加了.1和.2，使標籤更加獨特。

66
00:04:09,950 --> 00:04:12,540
但是這個標籤並不是很清楚，所以

67
00:04:12,540 --> 00:04:14,570
我們應該清理數據文件。

68
00:04:14,570 --> 00:04:18,500
我們當然可以直接通過直接編輯CSV文件來實現，

69
00:04:18,500 --> 00:04:21,640
但是我們也可以使用Pandas name屬性設置列的名稱。

70
00:04:22,930 --> 00:04:27,090
Pandas存儲所有列的列表在.columns屬性中。

71
00:04:27,090 --> 00:04:30,540
我們可以通過遍歷該列表來更改列名的值，

72
00:04:30,540 --> 00:04:33,280
並呼叫dataframe的rename方法。

73
00:04:33,280 --> 00:04:36,650
現在，我要複製並粘貼這些程式來加快，但是

74
00:04:36,650 --> 00:04:38,400
我們可以看一看發生了什麼。

75
00:04:39,600 --> 00:04:44,520
在這裡，我們只是遍歷所有列的值，看看它們是否

76
00:04:44,520 --> 00:04:47,830
以01，02，03或數字符開始。

77
00:04:47,830 --> 00:04:50,210
如果他們是，我們可以呼叫rename函數，

78
00:04:50,210 --> 00:04:54,030
並將列參數設置為dictionary，用的key是我們要替換的column，

79
00:04:54,030 --> 00:04:56,630
value是我們想要的新值。

80
00:04:57,700 --> 00:05:00,730
這裡我們將把一些舊的值分成兩部分，

81
00:05:00,730 --> 00:05:03,890
因為我們不想失去唯一的附加值。

82
00:05:03,890 --> 00:05:07,343
我們還會將非常重要的inplace參數設為true，

83
00:05:07,343 --> 00:05:09,991
以便Pandas知道直接更新此DataFrame。

84
00:05:12,625 --> 00:05:16,191
好的，這更多的是在DataFrame方面，重點是流程，

85
00:05:16,191 --> 00:05:19,660
實際獲取數據和放到我們可能要查詢的地方。