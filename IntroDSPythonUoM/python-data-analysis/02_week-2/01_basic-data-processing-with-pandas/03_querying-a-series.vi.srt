1
00:00:08,923 --> 00:00:13,090
Một hàm panda Series có thể được truy vấn theo
vị trí chỉ số hoặc nhãn dán chỉ số.

2
00:00:13,090 --> 00:00:15,930
Như bạn thấy, nếu bạn không đưa ra
một chỉ số vào các chuỗi, vị trí và

3
00:00:15,930 --> 00:00:18,500
nhãn mác là các giá trị giống nhau.

4
00:00:18,500 --> 00:00:23,580
Để truy vấn bởi định vị số, bắt đầu ở 0,
sử dụng thuộc tính iloc.

5
00:00:23,580 --> 00:00:27,270
Để truy vấn vởi nhãn mác chỉ số,
bạn có thể sử dụng thuộc tính loc.

6
00:00:27,270 --> 00:00:31,320
Đây là ví dụ về sử dụng dữ liệu sự kiện
thể thao quốc gia từ wikipedia.

7
00:00:31,320 --> 00:00:34,240
Hãy giả sử chúng ta muốn có một danh sách
tất cả các mon thể thao trong chỉ số của chúng ta và

8
00:00:34,240 --> 00:00:36,190
danh sách các quốc gia như là các giá trị.

9
00:00:36,190 --> 00:00:39,630
Bạn có thể giữ những điều này trong một từ điển
và tạo ra một chuỗi như chúng ta đã thảo luận.

10
00:00:40,660 --> 00:00:43,140
Nếu bạn muốn thấy quốc gia thứ tư trong này,

11
00:00:43,140 --> 00:00:47,180
bạn sẽ sử dụng thuộc tính iloc với tham số 3.

12
00:00:47,180 --> 00:00:50,540
Nếu bạn muốn xem quốc gia nào coi
đánh gôn là một môn thể thao quốc gia,

13
00:00:50,540 --> 00:00:53,630
bạn sẽ sử dụng thuộc tính loc với tham số golf.

14
00:00:53,630 --> 00:00:57,060
Nhớ rằng iloc và loc không phải các
phương pháp, chúng là các thuộc tính.

15
00:00:57,060 --> 00:01:00,629
Vì thế bạn sử dụng các dấu ngoặc đơn để
truy vấn chúng thay vì dấu ngoặc vuông,

16
00:01:00,629 --> 00:01:02,850
cái mà chúng ta sẽ gọi là toán tử chỉ số.

17
00:01:02,850 --> 00:01:03,550
Mặc dù trong python,

18
00:01:03,550 --> 00:01:06,840
điều này tạo ra và gán một phương pháp
phụ thuộc vào nội dung sử dụng.

19
00:01:07,970 --> 00:01:11,750
Cái này có vẻ hơi rắc rối nếu bạn đã sử dụng
các ngôn ngữ nơi đóng gói các

20
00:01:11,750 --> 00:01:15,220
các thuộc tính, các biến, properties là
phổ biến giống như trong java.

21
00:01:15,220 --> 00:01:19,510
Hàm panda cố gắng tạo ra mã có thể
đọc được và cung cấp các loại

22
00:01:19,510 --> 00:01:24,900
cú pháp thông minh sử dụng toán tử chỉ số trực tiếp trên các chuỗi.

23
00:01:24,900 --> 00:01:27,600
Ví dụ nếu bạn truyền một thông số số nguyên,

24
00:01:27,600 --> 00:01:32,390
toán tử sẽ hoạt động như thể
bạn muốn truy vấn qua thuộc tính iloc.

25
00:01:32,390 --> 00:01:33,640
Nếu bạn truyền vào một đối tượng,

26
00:01:33,640 --> 00:01:37,220
nó sẽ truy vấn liệu bạn muốn sử dụng
thuộc tính loc dựa trên nhãn dán.

27
00:01:38,400 --> 00:01:42,080
Điều gì xảy ra nếu chỉ số của bạn
là một danh sách các số nguyên?

28
00:01:42,080 --> 00:01:44,630
Điều này hơi phức tạp và hàm
panda không thể xác định

29
00:01:44,630 --> 00:01:49,470
tự động liệu bạn đang dự định truy vấn bằng
vị trí chỉ số hay nhãn dán chỉ số.

30
00:01:49,470 --> 00:01:53,140
Vì thế bạn cần phải cẩn thận khi sử dụng
toán tử chỉ số trên chính các chuỗi.

31
00:01:53,140 --> 00:01:57,430
Và lựa chọn an toàn hơn là
rõ ràng hơn và sử dụng iloc hoặc

32
00:01:57,430 --> 00:01:58,870
loc trực tiếp.

33
00:02:00,380 --> 00:02:02,980
Đây là ví dụ sử dụng một số dữ liệu
các môn thể thao mới,

34
00:02:02,980 --> 00:02:05,255
nơi các quốc gia được lập
chỉ số bằng số nguyên.

35
00:02:05,255 --> 00:02:07,864
Nếu chúng ta thử đặt s trước 0,
chúng ta có khóa sai,

36
00:02:07,864 --> 00:02:12,080
bởi vì không có phần tử nào trong danh sách
các môn thể thao với một chỉ số của 0.

37
00:02:12,080 --> 00:02:15,910
Thay vì chúng ta phải lấy iloc nếu
chúng ta muốn phần tử đầu tiên.

38
00:02:18,040 --> 00:02:20,690
OK vì thế bây giờ chúng ta biết cách
để lấy dữ liệu ra khỏi các chuỗi.

39
00:02:20,690 --> 00:02:23,150
Hãy nói về việc hoạt động dữ liệu.

40
00:02:23,150 --> 00:02:26,361
Một nhiệm vụ phổ biến là muốn xem xét
tất cả các giá trị bên trong của chuỗi và

41
00:02:26,361 --> 00:02:28,650
làm một số phép toán.

42
00:02:28,650 --> 00:02:31,620
Điều này có thể đang cố tìm ra các số
nhất định, tổng dữ liệu hoặc

43
00:02:31,620 --> 00:02:33,290
chuyển dữ liệu bằng một số cách.

44
00:02:34,330 --> 00:02:37,700
Một cách lập trình tiêu biểu để
tiếp cận cái này là lặp lại

45
00:02:37,700 --> 00:02:42,380
tất cả các mục trong chuỗi và dùng
một phép toán được quan tâm.

46
00:02:42,380 --> 00:02:46,040
Ví dụ chúng ta có thể tạo ra một
khung dữ liệu của các giá trị số thực động.

47
00:02:46,040 --> 00:02:49,130
Hãy nghĩ về những thứ như là giá cả
cho các sản phẩm khác nhau.

48
00:02:49,130 --> 00:02:52,060
Chúng ta có thể viết một chương trình
quen thuộc lặp tất cả các mục trong

49
00:02:52,060 --> 00:02:54,309
chuỗi và cộng chúng với nhau để có tổng số.

50
00:02:55,320 --> 00:02:57,310
Cái này hoạt động nhưng nó chậm.

51
00:02:57,310 --> 00:03:01,200
Các máy tính hiện đại có thể làm
nhiều nhiệm vụ cùng lúc nhưng

52
00:03:01,200 --> 00:03:03,460
không chỉ là các nhiệm vụ liên quan đến toán học.

53
00:03:04,460 --> 00:03:08,447
Hàm panda và các thư viện NumPy bên
dưới hỗ trợ phương pháp tính toán gọi là

54
00:03:08,447 --> 00:03:09,320
vecto hóa.

55
00:03:10,540 --> 00:03:14,100
Phương pháp vecto làm việc với hầu hết
các chức năng trong thư viện NumPy,

56
00:03:14,100 --> 00:03:15,380
bao gồm hàm tính tổng.

57
00:03:16,560 --> 00:03:19,990
Đây là cách chúng ta sẽ viết mã sử dụng
phương pháp tính tổng NumPy.

58
00:03:19,990 --> 00:03:24,423
Đầu tiên chúng ta cần phải nhập mô đun numpy,
sau đó chúng ta chỉ cần gọi np.sum và

59
00:03:24,423 --> 00:03:26,035
truyền vào một phần tử lặp.

60
00:03:26,035 --> 00:03:27,750
Trong trường hợp này các chuỗi panda của chúng ta.

61
00:03:29,210 --> 00:03:33,640
Bây giờ cả hai phương pháp này tạo ra giá trị
giống nhau nhưng có một cái nhanh hơn phải không?

62
00:03:33,640 --> 00:03:36,920
Ghi chú jupyter có một hàm có thể giúp được.

63
00:03:36,920 --> 00:03:39,750
Đầu tiên hãy tạo ra một chuỗi lớn
các số liệu ngẫu nhiên.

64
00:03:39,750 --> 00:03:43,700
Bạn sẽ thấy nó được sử dụng rất nhiều
khi các kĩ thuật minh họa bằng hàm panda.

65
00:03:43,700 --> 00:03:46,590
Lưu ý rằng tôi chỉ sử dụng phương pháp đầu giảm số lượng của

66
00:03:46,590 --> 00:03:50,540
dữ liệu được xuất ra bởi các chuỗi
tới năm yếu tố đầu tiên.

67
00:03:50,540 --> 00:03:54,920
Chúng ta có thể xác minh độ dài của chuỗi là đúng
bằng cách sử dụng hàm len.

68
00:03:54,920 --> 00:03:57,322
Các hàm ma thuật bắt đầu bằng
một kí hiệu tỉ lệ phần trăm.

69
00:03:57,322 --> 00:03:59,530
Nếu chúng ta nhập kí hiệu này
và sau đó ấn phím Tab,

70
00:03:59,530 --> 00:04:02,580
chúng ta có thể thấy một danh sách
các hàm ma thuật có sẵn.

71
00:04:02,580 --> 00:04:04,433
Bạn có thể viết các hàm ma thuật của bạn nhưng

72
00:04:04,433 --> 00:04:07,450
điều đó hơi vượt quá phạm vi của khóa học này.

73
00:04:07,450 --> 00:04:10,725
Chúng ta sẽ sử dụng cái được gọi là
hàm ma thuật di động.

74
00:04:10,725 --> 00:04:12,530
Cái này bắt đầu với hai kí hiệu tỉ lệ phần trăm và

75
00:04:12,530 --> 00:04:15,860
sửa đổi mã trong ghi chú jupyter hiện nay.

76
00:04:15,860 --> 00:04:18,440
Chức năng chúng ta sẽ
sử dụng được gọi là timeit.

77
00:04:18,440 --> 00:04:21,740
Và khi bạn đoán từ tên gọi, chức năng này
sẽ chạy mã của chúng ta một vài

78
00:04:21,740 --> 00:04:24,270
lần để xác định, trung bình nó mất bao lâu.

79
00:04:25,300 --> 00:04:27,880
Hãy chạy timeit với mã lặp gốc của chúng ta.

80
00:04:27,880 --> 00:04:31,050
Bạn có thể đưa timeit số lượng
vòng lặp mà bạn muốn chạy.

81
00:04:31,050 --> 00:04:33,395
Theo mặc định chúng ta sẽ
sử dụng 1,000 vòng lặp.

82
00:04:33,395 --> 00:04:36,840
Tôi sẽ yêu cầu timeit ở đây để sử dụng
100 vòng chạy bởi vì chúng ta đang ghi lại cái này.

83
00:04:37,980 --> 00:04:38,762
Không tệ nhỉ.

84
00:04:38,762 --> 00:04:42,310
Timeit chạy mã này và nó dường như không lâu lắm.

85
00:04:42,310 --> 00:04:43,940
Bây giờ hãy thử với phương pháp vecto.

86
00:04:45,230 --> 00:04:45,880
Ồ!

87
00:04:45,880 --> 00:04:48,190
Điều này khá là khác trong tốc độ và

88
00:04:48,190 --> 00:04:52,670
chứng tỏ lí do các nhà khoa học dữ liệu cần nhận thức
về các tính năng tính toán song song

89
00:04:52,670 --> 00:04:54,850
và bắt đầu suy nghĩ đến thuật ngữ lập trình chức năng.

90
00:04:56,140 --> 00:04:59,660
Tính năng liên quan trong hàm panda
và numpy được gọi là broadcasting.

91
00:04:59,660 --> 00:05:03,220
Với broadcasting, bạn có thể áp dụng
một toán tử với mỗi giá trị trong chuỗi,

92
00:05:03,220 --> 00:05:04,080
thay đổi các chuỗi.

93
00:05:05,080 --> 00:05:08,920
Ví dụ nếu chúng ta muốn tăng
mỗi biến bất kì lên 2,

94
00:05:08,920 --> 00:05:14,460
chúng ta có thể làm nhanh chóng sử dụng
toán tử += trực tiếp trên chuỗi đối tượng.

95
00:05:14,460 --> 00:05:17,870
Ở đây tôi sẽ chỉ sử dụng toán tử head
để in ra năm hàng đầu trong

96
00:05:17,870 --> 00:05:18,389
chuỗi.

97
00:05:19,910 --> 00:05:22,650
Cách làm này sẽ lặp qua tất cả

98
00:05:22,650 --> 00:05:26,220
các mục trong chuỗi và tăng giá trị trực tiếp.

99
00:05:26,220 --> 00:05:27,605
Một cách nhanh chóng.

100
00:05:27,605 --> 00:05:30,870
Hàm panda hỗ trợ việc lặp thông qua
một chuỗi giống như một từ điển,

101
00:05:30,870 --> 00:05:33,310
cho phép bạn giải nén các
giá trị một cách dễ dàng.

102
00:05:33,310 --> 00:05:35,660
Nhưng nếu bạn thấy bạn có thể
tự lặp thông qua một chuỗi,

103
00:05:35,660 --> 00:05:38,980
bạn nên đặt câu hỏi liệu bạn đang làm
mọi thứ theo cách tốt nhất chưa.

104
00:05:40,200 --> 00:05:43,330
Đây là cách chúng ta sẽ làm bằng cách
sử dụng phương pháp tập giá trị.

105
00:05:44,490 --> 00:05:46,656
Hãy thử và đo thời gian hai cách tiếp cận.

106
00:06:00,959 --> 00:06:02,165
Thật tuyệt vời.

107
00:06:02,165 --> 00:06:05,415
Nó không chỉ nhanh hơn
mà còn ngắn gọn hơn và

108
00:06:05,415 --> 00:06:07,785
thậm chí dễ đọc hơn.

109
00:06:07,785 --> 00:06:12,476
Các phép toán học điển hình
bạn mong muốn là vecto và

110
00:06:12,476 --> 00:06:17,053
tài liệu hàm NumPy để tạo ra
các hàm vecto của chính bạn.

111
00:06:17,053 --> 00:06:21,710
Lưu ý cuối cùng về việc sử dụng toán tử chỉ số
để truy cập các chuỗi dữ liệu.

112
00:06:21,710 --> 00:06:25,234
.loc cho phép bạn không chỉ
sửa đổi dữ liệu tại chỗ mà

113
00:06:25,234 --> 00:06:26,707
còn thêm dữ liệu mới.

114
00:06:26,707 --> 00:06:31,710
Nếu giá trị bạn truyền vào là chỉ số không tồn tại,
thì một phần tử mới được thêm vào.

115
00:06:31,710 --> 00:06:34,050
Và hãy nhớ, chỉ số có thể có các kiểu hỗn hợp.

116
00:06:34,050 --> 00:06:37,550
Trong khi nó rất quan trọng
để biết về cách nhập bên dưới,

117
00:06:37,550 --> 00:06:41,430
Hàm panda sẽ tự động thay đổi các kiểu
hàm NumPy bên dưới cho phù hợp.

118
00:06:42,560 --> 00:06:45,840
Đây là một ví dụ sử dụng một chuỗi các số.

119
00:06:45,840 --> 00:06:49,610
Chúng ta có thể thêm một số giá trị mới,
có thể là một con vật như bạn biết, tôi thích gấu.

120
00:06:49,610 --> 00:06:52,610
Chỉ bằng cách gọi toán tử chỉ số .loc.

121
00:06:52,610 --> 00:06:57,500
Chúng ta thấy rằng các loại kết hợp cho các giá trị dữ liệu
hoặc chỉ số nhãn dán đều không thành vấn đề với hàm panda.

122
00:06:59,540 --> 00:07:04,320
Cho tới khi tôi thấy một số ví dụ về chuỗi
nơi mà các giá trị chỉ số là duy nhất.

123
00:07:04,320 --> 00:07:07,390
Tôi muốn kết thúc bài giảng này bằng việc chỉ ra
một ví dụ nơi các giá trị chỉ số không phải duy nhất,

124
00:07:07,390 --> 00:07:09,860
và điều này làm cho khung dữ liệu khác biệt,

125
00:07:09,860 --> 00:07:12,210
có thể là cơ sở dữ liệu liên quan.

126
00:07:13,450 --> 00:07:16,320
Nhắc lại vấn đề về các quốc giá và
các môn thể thao quốc gia.

127
00:07:16,320 --> 00:07:19,690
Hóa ra là nhiều nước dường như
thích môn thể thao cricket.

128
00:07:19,690 --> 00:07:21,760
Chúng ta quay lại với chuỗi các môn thể thao cơ bản.

129
00:07:21,760 --> 00:07:25,310
Nó có thể tạo ra một chuỗi mới với các mục

130
00:07:25,310 --> 00:07:29,130
bóng gậy và sau đó sử dụng append
để mang chúng lại với nhau.

131
00:07:29,130 --> 00:07:32,380
Có một số các cân nhắc quan trọng
khi sử dụng append.

132
00:07:32,380 --> 00:07:34,410
Đầu tiên hàm panda sẽ lấy
một chuỗi của bạn và

133
00:07:34,410 --> 00:07:37,000
cố gắng để suy ra loại dữ liệu
tốt nhất để sử dụng.

134
00:07:37,000 --> 00:07:39,840
Trong ví dụ này tất cả mọi thứ là một
chuỗi vì thế không có vấn đề gì ở đây.

135
00:07:41,140 --> 00:07:45,050
Thứ hai phương pháp append không
thực sự thay đổi các chuỗi bên dưới.

136
00:07:45,050 --> 00:07:50,100
Thay vào đó nó quay trở lại một chuỗi mới
được tạo ta khi nối 2 cái cùng nhau.

137
00:07:50,100 --> 00:07:53,730
Chúng ta có thể thấy điều này bằng cách
quay lại và xuất ra các chuỗi gốc của các giá trị và

138
00:07:53,730 --> 00:07:55,190
thấy rằng chúng không thay đổi.

139
00:07:56,230 --> 00:07:58,360
Đó là một vấn đề rất có ý nghĩa với

140
00:07:58,360 --> 00:08:03,240
người sử dụng hàm panda mà đã từng
sử dụng các đối tượng được thay đổi tại chỗ.

141
00:08:03,240 --> 00:08:07,400
Vì thế hãy coi chừng nó, không chỉ với append mà còn
với các chức năng hàm panda khác cũng vậy.

142
00:08:08,970 --> 00:08:12,580
Cuối cùng chúng ta thấy rằng chúng ta
truy vấn chuỗi append với những người chơi bóng gậy

143
00:08:12,580 --> 00:08:17,520
như là môn thể thao quốc gia của họ, chúng ta không
có giá trị đơn ngoại trừ một chuỗi giá trị của chính nó.

144
00:08:17,520 --> 00:08:19,330
Điều này rất phổ biến và

145
00:08:19,330 --> 00:08:22,930
nếu bạn có nền tảng cơ sở dữ liệu quan hệ
điều này tương tự với

146
00:08:22,930 --> 00:08:27,020
mỗi bảng kết quả truy vấn trong thiết lập trở lại.

147
00:08:28,110 --> 00:08:28,810
Trong bài giảng này,

148
00:08:28,810 --> 00:08:33,730
chúng ta tập trung vào một trong các loại
dữ liệu chính của thư viện panda, các chuỗi.

149
00:08:33,730 --> 00:08:36,630
Có rất nhiều phương pháp liên quan đến
đối tượng chuỗi này mà chúng ta không có.

150
00:08:36,630 --> 00:08:37,250
mà chúng ta đã nhắc đến.

151
00:08:37,250 --> 00:08:39,838
Nhưng với những điều cơ bản
chúng ta sẽ chuyển sang nói về

152
00:08:39,838 --> 00:08:43,510
cấu trúc dữ liệu hai chiều
của hàm panda, khung dữ liệu.

153
00:08:43,510 --> 00:08:46,230
Khung dữ liệu tương tự như
đối tượng chuỗi nhưng

154
00:08:46,230 --> 00:08:49,620
bao gồm các cột dữ liệu và là
cấu trúc mà bạn sẽ dành

155
00:08:49,620 --> 00:08:53,000
thời gian của bạn làm việc khi
làm sạch và tập hợp dữ liệu.

156
00:08:54,560 --> 00:08:58,460
Nhưng trước khi chúng ta chuyển sang thảo luận
về khung dữ liệu, trợ lý hướng dẫn cho

157
00:08:58,460 --> 00:09:02,870
khóa học này sẽ cung cấp một cái nhìn sâu hơn
cách đối tượng chuỗi được sử dụng.