常見的工作流程是將數據讀入DataFrame， 然後將該DataFrame減少到特定的列(column) 或行(row)，你有興趣處理的。 如您所見，Pandas的工具組試圖給你DataFrame的視圖。 這是比複製資料快得多，和更有效率的使用記憶體。 但是它的確意味著，如果你正在操作數據，則必須注意， 任何更改在你處理的DataFrame， 可能會對你最初使用的基本DataFrame產生影響。 以下是使用我們相同的採購DataFrame的例子。 我們可以創建一個列表使用方括號，只用cost類別。 那麼我們可以通過廣播(broadcasting)來增加這個列表裏的費用。 現在，如果我們看看我們原來的DataFrame，我們看到這些費用也增加了。 這是值得注意的重要考慮因素。 如果要明確地使用一個副本， 那麼你應該首先考慮在DataFrame上調用copy方法。 在這個課程中，我們將主要使用較小的中等大小的數據集。 正如我提到的， 通常的工作流程是讀取一些外部的文件數據集。 我們以前看過如何使用Python，列表(list)和字典(dictionary)來做到這一點。 你可以想像如何使用這些dictionary來創建一個Pandas的DataFrame。 幸運的是，Pandas有內置的支持，對於 例如分隔文件（如.CSV文件）以及各種 其他數據格式，包括關連資料庫，Excel和HTML表。 我保存了一個名為olympics.csv的CSV文件， 其中包含維基百科的數據，包含了獎牌的總結列表， 關於各國在奧運會贏得的。 我們可以使用shell命令cat來查看這個文件。 我們可以直接調用使用驚嘆號(!)。 這裡發生的情況是，當Jupyter筆記本看到一行操作 以驚嘆號開始的時，它會將其餘的命令發送到操作系統shell 去進行評估。 所以cat可以運行在Linux和Mac以及Coursera平台上， 但可能無法在Windows上運行。 你不用擔心太多了。 我只是想展示Jupyter筆記本電腦如何與作業系統整合， 為你提供更多的工具來查看你的數據。 我們從cat輸出中看到似乎有一列(column)的數值， 後面跟著一堆列(column)的標籤。 在列的標籤中有一些奇怪的字符。 這是unicode numero符號，意思是數量。 然後我們有許多行(row)的數據，都根據列(column)來分隔。 我們可以將其讀入DataFrame，通過呼叫read_csv 模組函數 當我們看到DataFrame時，我們看到第一個單元格中有一個NaN， 因為它是一個空值，並且這些行已經為我們自動編入索引(index)。 很明顯，DataFrame中的第一行(row)數據 是我們真正希望看到的列名標籤。 數據中的第一列(column)似乎也是國家的名稱， 我們想用它來做成索引(index)。 讀取csv有一些參數，我們可以使用它來指示 Pandas如何來標記行和列。 例如，我們可以使用index_col來指示哪個列應該是索引， 我們也可以使用header參數來指示數據文件中哪一行(row) 應該用作標籤。 讓我們重新導入數據，和設置索引值index_col為0，這是第一列， 並設置列的標籤從第二行數據來讀取。 我們可以通過使用skiprows參數來做到這一點， 告訴Pandas去忽略由數字組成的第一行。 現在這個數據來自維基百科的所有奧運會獎牌。 如果我們來到這個頁面，我們可以看到，這些頁面沒有用金，銀和 銅牌，而是用一個漂亮的小圖標，加上一個1，一個2， 另外一個3在裏面。在我們的csv文件中，它們用字串01！來表示 ，02！等等。 我們看到列(column)的值被重複，這真的不是很好的做法。 Pandas認識到這一點，而附加了.1和.2，使標籤更加獨特。 但是這個標籤並不是很清楚，所以 我們應該清理數據文件。 我們當然可以直接通過直接編輯CSV文件來實現， 但是我們也可以使用Pandas name屬性設置列的名稱。 Pandas存儲所有列的列表在.columns屬性中。 我們可以通過遍歷該列表來更改列名的值， 並呼叫dataframe的rename方法。 現在，我要複製並粘貼這些程式來加快，但是 我們可以看一看發生了什麼。 在這裡，我們只是遍歷所有列的值，看看它們是否 以01，02，03或數字符開始。 如果他們是，我們可以呼叫rename函數， 並將列參數設置為dictionary，用的key是我們要替換的column， value是我們想要的新值。 這裡我們將把一些舊的值分成兩部分， 因為我們不想失去唯一的附加值。 我們還會將非常重要的inplace參數設為true， 以便Pandas知道直接更新此DataFrame。 好的，這更多的是在DataFrame方面，重點是流程， 實際獲取數據和放到我們可能要查詢的地方。