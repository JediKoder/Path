1
00:00:09,048 --> 00:00:12,110
系列(Series)是Pandas中的核心數據結構之一。

2
00:00:12,110 --> 00:00:14,710
你可以想像一下相交於列表(list)和字典(dictionary)之間。

3
00:00:14,710 --> 00:00:16,165
這些項目都按照順序儲存，

4
00:00:16,165 --> 00:00:18,670
並且有標籤可以從中檢索。

5
00:00:18,670 --> 00:00:21,450
一個簡單的方法去想象，它是兩列數據。

6
00:00:21,450 --> 00:00:24,485
第一欄是特殊的索引，很像字典dictionary的key。

7
00:00:24,485 --> 00:00:26,670
而第二欄則是你真實的數據。

8
00:00:26,670 --> 00:00:30,058
重要的是注意資料欄位也有自己的標籤

9
00:00:30,058 --> 00:00:32,391
可以透過 .name 來取得

10
00:00:32,391 --> 00:00:34,425
這與dictionary不同，

11
00:00:34,425 --> 00:00:37,162
在合併多列數據時很有用。

12
00:00:37,162 --> 00:00:39,389
我們稍後再談談。

13
00:00:40,700 --> 00:00:44,860
你可能會預期，可以透過傳遞一個 list 的值來新創一個 Series

14
00:00:44,860 --> 00:00:48,540
當你這麼做時， Pandas 會自動從零開始分配索引

15
00:00:48,540 --> 00:00:50,950
並將該series的名稱設置為“None”。

16
00:00:50,950 --> 00:00:52,740
我們來看個例子

17
00:00:52,740 --> 00:00:56,250
首先，我輸入pandas程式庫，將它設定為pd，

18
00:00:56,250 --> 00:00:58,990
讓我們看一下 Series 物件

19
00:00:58,990 --> 00:01:03,311
從文件中可以看出
你可以傳入一些資料

20
00:01:03,311 --> 00:01:04,432
索引和名稱

21
00:01:04,432 --> 00:01:07,617
資料可以是任何東西，類似陣列(array)，像list一樣。

22
00:01:07,617 --> 00:01:10,037
讓我們來試一試。

23
00:01:10,037 --> 00:01:13,759
我會用三個我喜歡的動物來建立串列

24
00:01:13,759 --> 00:01:14,795
獅子，熊和麋鹿

25
00:01:14,795 --> 00:01:18,274
我們看到這裡pandas自動的識別了類型

26
00:01:18,274 --> 00:01:21,923
在list中包含的數據，在這裡我們傳入string列表，

27
00:01:21,923 --> 00:01:23,368
pandas將這類型設定為object。

28
00:01:27,320 --> 00:01:28,461
我們不一定要使用strings。

29
00:01:28,461 --> 00:01:31,619
如果我們傳入整數列表，例如，

30
00:01:31,619 --> 00:01:34,311
可以看見Pandas設定類型為int64。

31
00:01:34,311 --> 00:01:39,680
在Pandas內部儲存series的值，使用NumPy程式庫的類型陣列(typed array)。

32
00:01:39,680 --> 00:01:43,130
在處理數據時這提供顯著的加速，比較於傳統

33
00:01:43,130 --> 00:01:43,740
Python的list

34
00:01:45,260 --> 00:01:47,280
還有一些其他有關類型的細節存在，

35
00:01:47,280 --> 00:01:49,320
對於其性能的了解很重要。

36
00:01:49,320 --> 00:01:53,839
最重要的是 NumPy 和 Pandas 如何處理遺失的資料

37
00:01:53,839 --> 00:01:56,840
在Python中，我們有none type以表示資料缺失。

38
00:01:56,840 --> 00:01:59,684
但是我們該怎麼做，如果我們想要有一個類型的list，像我們在

39
00:01:59,684 --> 00:02:00,726
series object?

40
00:02:07,315 --> 00:02:09,700
在內部，pandas會執行一些類型轉換。

41
00:02:09,700 --> 00:02:13,596
如果我們創建一個list的strings，而我們有一個元素是None類型，

42
00:02:13,596 --> 00:02:18,139
pandas將它作為None，並使用object的類型在內部陣列。

43
00:02:18,139 --> 00:02:22,406
如果我們創建一個數字，整數或浮點的列表，並放入None類型，

44
00:02:22,406 --> 00:02:27,073
Pandas會自動將其轉換為特殊浮點值，指定為NaN，

45
00:02:27,073 --> 00:02:29,130
代表它不是一個數字。

46
00:02:30,480 --> 00:02:33,580
對於那些沒有用過Python科學計算的人，

47
00:02:33,580 --> 00:02:35,020
這是一個很重要的一點。

48
00:02:37,760 --> 00:02:41,784
NaN不是None，當我們嘗試相等測試時，它是偽的

49
00:02:45,417 --> 00:02:49,690
原來你還不能做Nan本身的相等測試。

50
00:02:49,690 --> 00:02:52,300
當你這樣做時，答案總是錯誤的。

51
00:02:52,300 --> 00:02:54,340
你需要使用特殊功能來測試

52
00:02:54,340 --> 00:02:59,160
'不是一個數字'的存在，例如numpy程式庫中的isnan。

53
00:03:00,160 --> 00:03:02,290
我們稍後將在作業中再回來這，

54
00:03:02,290 --> 00:03:05,840
請記住，當你看到Nan，它意思類似于none，但

55
00:03:05,840 --> 00:03:09,690
它是一個數值，它的區別對待是因為效率的原因。

56
00:03:09,690 --> 00:03:12,590
讓我們來談談如何可以創造出pandas的series。

57
00:03:12,590 --> 00:03:16,390
雖然我的動物列表可能是創建一些玩的數據的常用方法，

58
00:03:16,390 --> 00:03:19,210
但通常你需標籤的數據來操作。

59
00:03:19,210 --> 00:03:21,630
series可以從dictionary數據來創建。

60
00:03:21,630 --> 00:03:24,850
如果這樣做，你提供的dictionary的keys將自動指派成索引(index)

61
00:03:24,850 --> 00:03:28,290
，而不僅僅是遞增整數的index。

62
00:03:28,290 --> 00:03:32,640
這裡有一個使用維基百科的官方全國運動的數據的例子。

63
00:03:32,640 --> 00:03:34,610
當我們創建的series時，我們看到，

64
00:03:34,610 --> 00:03:39,160
因為它是string數據，pandas將一系列的數據類型設置為object。

65
00:03:39,160 --> 00:03:42,770
我們將國家列表設置為series的value，

66
00:03:42,770 --> 00:03:45,860
並將index的value設置為我們的dictionary中的keys。

67
00:03:47,200 --> 00:03:48,600
series創建完成後，

68
00:03:48,600 --> 00:03:52,490
我們可以使用index屬性獲取index對象。

69
00:03:52,490 --> 00:03:55,900
你也可以將index的創建與數據分離，通過

70
00:03:55,900 --> 00:03:58,520
將index作為列表，明確地傳遞給series。

71
00:03:59,690 --> 00:04:02,290
那麼如果index中的值列表

72
00:04:02,290 --> 00:04:06,748
與dictionary中用於創建該系列的keys不對齊，會發生什麼？

73
00:04:06,748 --> 00:04:10,390
在這種情況下，pandas會覆蓋自動創建index值，僅只偏用

74
00:04:10,390 --> 00:04:13,275
你提供的所有的index值。

75
00:04:13,275 --> 00:04:17,210
它會忽略你的dictionary中所有的keys，當keys不在你的index中，而且

76
00:04:17,210 --> 00:04:21,610
pandas將添加non類型或NaN值，在你提供的任何index值，

77
00:04:21,610 --> 00:04:24,290
而不存在你的dictionary的key列表中。

78
00:04:24,290 --> 00:04:27,500
在這個例子中，我們傳遞一個四個項目的dictionary，

79
00:04:27,500 --> 00:04:31,520
由於index列表，只有兩個保留在series object。

80
00:04:31,520 --> 00:04:35,395
我們看到曲棍球已被添加，但是由於它也在index列表中，

81
00:04:35,395 --> 00:04:37,345
它沒有相關的值。

82
00:04:40,016 --> 00:04:41,870
這就是我們如何創建series。

83
00:04:41,870 --> 00:04:45,280
在下一課中，我們將深入研究如何從series中獲取數據。