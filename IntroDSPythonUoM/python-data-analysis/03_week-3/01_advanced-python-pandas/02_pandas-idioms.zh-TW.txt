Python程序設計師通常認為在程式語言中，可以使用多種方法 來解決一個特定問題。 但是，有些是比其他的更合適。 最好的解決方案被稱為慣用的Python， 有很多很好的例子在stackoverflow和網站上。 慣用的解決方案通常是具有高性能和 高可讀性。 這並不一定是真的。 如同某種Python的子語言，Pandas有自己的一套慣用語。 我們已經提到了其中一些，例如盡可能使用向量化 ，和不使用反覆運算迴圈，如果你不需要。 幾位開發人員和 用戶在Pandas社區內，對這些慣用語稱為pandorable。 我認為這是一個非常好的術語。 所以，我想和你分享幾個關鍵特色，如何可以使您的程式 pandorable。 其中第一個稱為方法鏈接(method chaining)。 我們以前看到過， 當您查詢DataFrames時，您可以將pandas的程序調用鏈接在一起。 例如，如果要根據像縣名的索引來選擇行(row)。 然後你只想要，像Total Population一樣的，某些列(column)， 你可以編寫一個查詢，如df.loc[“Washtenaw”][“Total Population”] 這是一種鏈接形式，稱為鏈式索引(chain indexing)。 這通常是一個糟糕的做法。 因為Pandas可能會返回DataFrame的副本或 視圖，根據基礎的NumPy程式庫。 在他對pandas慣用語的描述，模式開發人員 Tom Osberger為此說了一個經驗法則。 如果你看到背靠背的方括號， 那麼你應該仔細想想，如果你想做鏈式索引。 我認為這是一個很好的程式探察或反模式。 方法鏈接，然而，有點不同。 方法鏈接的一般思想是，每個方法 對某物件，都會返回參考(reference)該物件。 這樣做的好處是，您可以將許多不同操作 在一個DataFrame，集中在一行或至少一個程式語句中。 這是Pandas中的兩種程式的例子，使用我們的人口普查數據。 第一個是pandorable方式，用方法鏈接編寫的程式。 在這段程式中，沒有使用inplace選項標誌，你可以看到，我們 首先運行一個where查詢，然後一個dropna，然後一個set_index，然後一個rename。 您可能會想知道為什麼整個語句被括在括號中， 這只是為了使語句更易於閱讀。 在Python中，如果你從一個開放括號開始， 你可以一個語句跨越很多行，更好讀一點。 第二個例子是編寫程式的更傳統的方式。 這個程式在功能上沒有什麼問題， 做為語言的一個新人，甚至可以更容易地理解。 它不像第一個例子那樣pandorable。 現在，任何好的慣用語的關鍵是，要理解它不幫你的時候。 在這種情況下，你可以實際量這兩種方法時間的和 看到後一種方法是更快。 所以，這是一個典型的時間-可讀性折衷的例子。 你會看到許多的例子在stackoverflow，以及 在Pandas中他們使用方法鏈接的文檔。 所以，我認為能夠閱讀和 理解語法，真的值得你花的時間。 這有另一個Pandas的慣用語。 Python有一個很好的功能，叫做map，它是語言中 函數功能程式的基礎。 當你想在Python中使用map時，你傳遞一些你想要調用的函數， 一些可以反復迭的物件，像一個列表，你要這函數運用在上面的。 結果是對列表中的每個項目運用這個函數， 其輸出是，所有函數執行的結果列表。 Python有一個類似的功能，名為applymap。 在applymap中，您提供了一些應該對DataFrame的每個單元格進行操作的函數， 資料幀，並返回集合本身就是一個資料幀。 我認為applymap是好的，但實際上很少使用它。 相反，我發現自己經常希望映射所有的行 資料幀。 Pandas有一個我在這里經常使用的功能，稱為apply。 讓我們看另一個例子 我們來看看普查的DataFrame。 在這個DataFrame中，我們有五列的人口估計。 每列對應一年的估計。 是非常合理的去想要創建一些新列，用最小或 最大值，apply函數是一種簡單的方法。 首先，我們需要編寫一個函數，該函數接收特定的數據行， 找到最小值和最大值，並返回一行新的數據。 我們稱這個函數為min_max，這很簡單。 我們可以創建一小片的行，通過投影population列。 然後使用NumPy的min和max函數， 並創建一個帶有標籤值的新系列，表示我們要應用的新值。 然後我們只需要在DataFrame上調用apply。 apply採取先前的函數和指定的軸(axis)作為運作的參數。 現在，我們要小心一點， 我們過去談過軸零(axiz 0)是DataFrame的行。 但這個參數實際上是使用那個索引的參數。 因此，要應用跨所有的行，您將軸等於1。 當然，沒有必要限制自己返回一個新的系列物件。 如果您作為數據清理的一部分，可能會發現自己 想要將新數據添加到現有DataFrame中。 在這種情況下，您只需取行的值， 並添加新的列，表示最大和最小值。 這是我經常工作流程的一部分，用提供的數據來構建摘要或 描述性統計數據。 並且經常被用來合併DataFrames。 好的，這是非常好的，apply是您工具包中非常重要的工具。 但是這個講座並不是真的應該是關於API的新功能， 而是關於製作pandorable程式。 我在這裡介紹apply的原因是因為你很少看到它 與大的函數定義一起使用，就像我們做的。 相反，你通常會看到它與lambda一起使用。 現在，你回想本課程的第一周，知道lambda不是 課程的必要條件。 但是，為了充分利用網路上的討論， 您需要知道至少能夠讀lambda的程式。 以下是一個一行示例，說明如何計算列的最大值， 使用apply函數。 您可以想像如何鏈接多個apply程式與lambda一起用， 以創建一個可讀而簡潔的數據操作程式 所以這是幾個pandas的慣用語。 但我覺得還有很多，我沒有在這裡談論過。 所以這是一個非正式的作業給你。 去看看StackOverflow上一些關於pandas排名最高的問題， 看看一些更有經驗的作者，回答這些問題。 你看到有趣的模式嗎？ 加入在課程討論的論壇上， 讓我們一起構建一些pandorable的文件。 我們的下一個講課將是group功能函數，回頭見。