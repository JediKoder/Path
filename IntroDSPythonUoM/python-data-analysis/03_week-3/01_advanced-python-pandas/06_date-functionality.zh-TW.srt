1
00:00:08,408 --> 00:00:10,520
歡迎來到今天的教程，

2
00:00:10,520 --> 00:00:13,960
我們將在Pandas中查看時間序列和日期功能。

3
00:00:15,350 --> 00:00:17,820
Pandas有四個主要的時間相關類型。

4
00:00:17,820 --> 00:00:22,740
Timestamp，DatetimeIndex，Period和PeriodIndex。

5
00:00:22,740 --> 00:00:25,250
首先，我們來看一下Timestamp。

6
00:00:25,250 --> 00:00:29,989
Timestamp表示單個時間戳，並將值與時間點相關聯。

7
00:00:31,733 --> 00:00:35,665
例如，讓我們創建時間戳使用字串

8
00:00:35,665 --> 00:00:41,460
'9/1/2016 10:05AM'，這裡我們有我們的時間戳。

9
00:00:41,460 --> 00:00:44,980
在大多數情況下，Timestamp可以與Python的datetime互換。

10
00:00:46,130 --> 00:00:49,270
假設我們對特定時間點不感興趣，

11
00:00:49,270 --> 00:00:51,760
而是想要一段時間。

12
00:00:51,760 --> 00:00:53,240
這就是使用Period的時候。

13
00:00:55,230 --> 00:00:58,810
Period代表單個時間跨度，例如特定的日期或月份。

14
00:01:00,470 --> 00:01:04,470
這裡我們創建一個2016年1月的Period，

15
00:01:04,470 --> 00:01:09,480
這裡是2016年3月5日的一個Period例子。

16
00:01:09,480 --> 00:01:13,720
timestamp的索引(index)是DatetimeIndex。

17
00:01:13,720 --> 00:01:14,820
我們來看一個簡單的例子。

18
00:01:16,400 --> 00:01:19,886
首先，我們創建我們的示例系列t1，

19
00:01:19,886 --> 00:01:25,220
我們將使用2016年9月1日，2月和3日的Timestamp。

20
00:01:27,689 --> 00:01:31,883
當我們看這個系列時，每個時間戳是索引

21
00:01:31,883 --> 00:01:36,090
並且具有與之相關聯的值，在這種情況下，a，b和c。

22
00:01:38,330 --> 00:01:42,070
看看我們的系列索引的類型，我們看到它是DatetimeIndex。

23
00:01:43,740 --> 00:01:46,650
同樣，期間(Period)索引是PeriodIndex。

24
00:01:47,840 --> 00:01:50,140
讓我們再創一個示例系列t2。

25
00:01:50,140 --> 00:01:53,990
這一次，我們將使用值d，e和f，

26
00:01:53,990 --> 00:01:58,154
並將其與2016年9月，10月和11月的時期匹配。

27
00:02:00,980 --> 00:02:07,490
看看ts2.index的類型，我們可以看到它是PeriodIndex。

28
00:02:07,490 --> 00:02:09,840
現在，我們來研究如何轉換為日期時間。

29
00:02:11,950 --> 00:02:13,840
假設我們有一個列表，字串為日期。

30
00:02:14,890 --> 00:02:17,860
如果我們使用這些日期作為索引創建一個DataFrame。

31
00:02:17,860 --> 00:02:20,850
和一些最低限度生成的數據，這是我們得到的DataFrame。

32
00:02:26,600 --> 00:02:29,140
看一下這個索引，我們可以看到它很混亂，

33
00:02:29,140 --> 00:02:30,620
日期都是不同的格式。

34
00:02:31,900 --> 00:02:36,440
使用Pandas的to_datetime，Pandas將嘗試將它們轉換為

35
00:02:36,440 --> 00:02:37,570
日期時間，並將其放在標準格式中。

36
00:02:39,560 --> 00:02:43,330
to_datetime還有更改日期解析順序的選項。

37
00:02:43,330 --> 00:02:47,920
例如，我們可以通過參數dayfirst=True來

38
00:02:47,920 --> 00:02:49,760
解析歐洲日期格式的日期。

39
00:02:52,310 --> 00:02:56,049
時間差異是時間的差異。

40
00:02:56,049 --> 00:02:59,490
我們可以看到，當我們取之間差異，在9月3日和

41
00:02:59,490 --> 00:03:00,390
9月1日時，

42
00:03:00,390 --> 00:03:02,250
我們得到了兩天的Timedelta。

43
00:03:03,580 --> 00:03:08,088
我們也可以做一些事情找到日期和時間，比如12天

44
00:03:08,088 --> 00:03:11,223
和3個小時之後，從在9月2日上午8:10開始計數。

45
00:03:13,800 --> 00:03:16,620
接下來，我們來看看在DataFrame中處理日期的一些技巧。

46
00:03:18,730 --> 00:03:21,591
假設我們要查看九個測量，每週兩次，

47
00:03:21,591 --> 00:03:22,740
每個星期日，

48
00:03:22,740 --> 00:03:23,960
從2016年10月開始。

49
00:03:23,960 --> 00:03:29,555
使用date_range，我們可以創建這個DatetimeIndex。

50
00:03:33,369 --> 00:03:37,285
現在，讓我們使用這些日期和一些隨機數據創建一個DataFrame，

51
00:03:37,285 --> 00:03:38,621
看看我們可以做些什麼。

52
00:03:49,427 --> 00:03:53,400
首先，我們可以檢查一個特定日期的星期幾。

53
00:03:53,400 --> 00:03:56,960
例如，我們可以看到，索引中的所有日期都在星期日。

54
00:03:58,360 --> 00:04:01,360
我們可以使用diff來查找每個日期值之間的差異。

55
00:04:03,310 --> 00:04:06,780
假設我們想知道DataFrame中每個月的平均數是多少。

56
00:04:07,980 --> 00:04:10,671
我們可以使用resample來做到這一點。

57
00:04:13,562 --> 00:04:17,883
我們可以使用部分字串索引來查找特定年份或

58
00:04:17,883 --> 00:04:22,480
特定月份的值，或者我們甚至可以在一系列日期中進行切片。

59
00:04:22,480 --> 00:04:25,710
例如，這裡我們只想要從2016年12月算起的值。

60
00:04:27,930 --> 00:04:32,010
我們可以做的另一件很酷的事情是在DataFrame中更改我們日期的頻率，

61
00:04:32,010 --> 00:04:32,780
使用asfreq。

62
00:04:35,050 --> 00:04:38,450
如果我們使用這種方式將頻率從每兩週更改為每週，

63
00:04:38,450 --> 00:04:41,370
我們每隔一周就會丟失值。

64
00:04:41,370 --> 00:04:43,900
所以讓我們對這些缺失的值使用正向填充ffill方法。

65
00:04:45,050 --> 00:04:48,170
最後一件我想簡要介紹的是繪製時間序列。

66
00:04:50,600 --> 00:04:56,710
導入matplotlib.pyplot，並使用iPython 魔法 ％matplotlib inline，

67
00:04:56,710 --> 00:04:59,070
將允許您可視化筆記本中的時間序列。

68
00:05:00,820 --> 00:05:03,523
在下一課程中，我們將進一步了解理解和

69
00:05:03,523 --> 00:05:04,747
創建可視化。

70
00:05:04,747 --> 00:05:06,736
感謝觀看，下次見